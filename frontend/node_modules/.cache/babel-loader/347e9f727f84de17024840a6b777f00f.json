{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { renderElement } from './utils';\n/**\n * Row component for BaseTable\n */\n\nvar TableRow = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(TableRow, _React$PureComponent);\n\n  function TableRow(props) {\n    var _this;\n\n    _this = _React$PureComponent.call(this, props) || this;\n    _this.state = {\n      measured: false\n    };\n    _this._setRef = _this._setRef.bind(_assertThisInitialized(_this));\n    _this._handleExpand = _this._handleExpand.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = TableRow.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props.estimatedRowHeight && this.props.rowIndex >= 0 && this._measureHeight(true);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var _this2 = this;\n\n    if (this.props.estimatedRowHeight && this.props.rowIndex >= 0 && // should not re-measure if it's updated after measured and reset\n    !this.props.getIsResetting() && this.state.measured && prevState.measured) {\n      this.setState({\n        measured: false\n      }, function () {\n        return _this2._measureHeight();\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    /* eslint-disable no-unused-vars */\n    var _this$props = this.props,\n        isScrolling = _this$props.isScrolling,\n        className = _this$props.className,\n        style = _this$props.style,\n        columns = _this$props.columns,\n        rowIndex = _this$props.rowIndex,\n        rowData = _this$props.rowData,\n        expandColumnKey = _this$props.expandColumnKey,\n        depth = _this$props.depth,\n        rowEventHandlers = _this$props.rowEventHandlers,\n        estimatedRowHeight = _this$props.estimatedRowHeight,\n        rowRenderer = _this$props.rowRenderer,\n        cellRenderer = _this$props.cellRenderer,\n        expandIconRenderer = _this$props.expandIconRenderer,\n        Tag = _this$props.tagName,\n        rowKey = _this$props.rowKey,\n        getIsResetting = _this$props.getIsResetting,\n        onRowHover = _this$props.onRowHover,\n        onRowExpand = _this$props.onRowExpand,\n        onRowHeightChange = _this$props.onRowHeightChange,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"isScrolling\", \"className\", \"style\", \"columns\", \"rowIndex\", \"rowData\", \"expandColumnKey\", \"depth\", \"rowEventHandlers\", \"estimatedRowHeight\", \"rowRenderer\", \"cellRenderer\", \"expandIconRenderer\", \"tagName\", \"rowKey\", \"getIsResetting\", \"onRowHover\", \"onRowExpand\", \"onRowHeightChange\"]);\n    /* eslint-enable no-unused-vars */\n\n\n    var expandIcon = expandIconRenderer({\n      rowData: rowData,\n      rowIndex: rowIndex,\n      depth: depth,\n      onExpand: this._handleExpand\n    });\n    var cells = columns.map(function (column, columnIndex) {\n      return cellRenderer({\n        isScrolling: isScrolling,\n        columns: columns,\n        column: column,\n        columnIndex: columnIndex,\n        rowData: rowData,\n        rowIndex: rowIndex,\n        expandIcon: column.key === expandColumnKey && expandIcon\n      });\n    });\n\n    if (rowRenderer) {\n      cells = renderElement(rowRenderer, {\n        isScrolling: isScrolling,\n        cells: cells,\n        columns: columns,\n        rowData: rowData,\n        rowIndex: rowIndex,\n        depth: depth\n      });\n    }\n\n    var eventHandlers = this._getEventHandlers(rowEventHandlers);\n\n    if (estimatedRowHeight && rowIndex >= 0) {\n      var height = style.height,\n          otherStyles = _objectWithoutPropertiesLoose(style, [\"height\"]);\n\n      return React.createElement(Tag, _extends({}, rest, {\n        ref: this._setRef,\n        className: className,\n        style: this.state.measured ? style : otherStyles\n      }, this.state.measured && eventHandlers), cells);\n    }\n\n    return React.createElement(Tag, _extends({}, rest, {\n      className: className,\n      style: style\n    }, eventHandlers), cells);\n  };\n\n  _proto._setRef = function _setRef(ref) {\n    this.ref = ref;\n  };\n\n  _proto._handleExpand = function _handleExpand(expanded) {\n    var _this$props2 = this.props,\n        onRowExpand = _this$props2.onRowExpand,\n        rowData = _this$props2.rowData,\n        rowIndex = _this$props2.rowIndex,\n        rowKey = _this$props2.rowKey;\n    onRowExpand && onRowExpand({\n      expanded: expanded,\n      rowData: rowData,\n      rowIndex: rowIndex,\n      rowKey: rowKey\n    });\n  };\n\n  _proto._measureHeight = function _measureHeight(initialMeasure) {\n    if (!this.ref) return;\n    var _this$props3 = this.props,\n        style = _this$props3.style,\n        rowKey = _this$props3.rowKey,\n        onRowHeightChange = _this$props3.onRowHeightChange,\n        rowIndex = _this$props3.rowIndex,\n        columns = _this$props3.columns;\n    var height = this.ref.getBoundingClientRect().height;\n    this.setState({\n      measured: true\n    }, function () {\n      if (initialMeasure || height !== style.height) onRowHeightChange(rowKey, height, rowIndex, columns[0] && !columns[0].__placeholder__ && columns[0].frozen);\n    });\n  };\n\n  _proto._getEventHandlers = function _getEventHandlers(handlers) {\n    if (handlers === void 0) {\n      handlers = {};\n    }\n\n    var _this$props4 = this.props,\n        rowData = _this$props4.rowData,\n        rowIndex = _this$props4.rowIndex,\n        rowKey = _this$props4.rowKey,\n        onRowHover = _this$props4.onRowHover;\n    var eventHandlers = {};\n    Object.keys(handlers).forEach(function (eventKey) {\n      var callback = handlers[eventKey];\n\n      if (typeof callback === 'function') {\n        eventHandlers[eventKey] = function (event) {\n          callback({\n            rowData: rowData,\n            rowIndex: rowIndex,\n            rowKey: rowKey,\n            event: event\n          });\n        };\n      }\n    });\n\n    if (onRowHover) {\n      var mouseEnterHandler = eventHandlers['onMouseEnter'];\n\n      eventHandlers['onMouseEnter'] = function (event) {\n        onRowHover({\n          hovered: true,\n          rowData: rowData,\n          rowIndex: rowIndex,\n          rowKey: rowKey,\n          event: event\n        });\n        mouseEnterHandler && mouseEnterHandler(event);\n      };\n\n      var mouseLeaveHandler = eventHandlers['onMouseLeave'];\n\n      eventHandlers['onMouseLeave'] = function (event) {\n        onRowHover({\n          hovered: false,\n          rowData: rowData,\n          rowIndex: rowIndex,\n          rowKey: rowKey,\n          event: event\n        });\n        mouseLeaveHandler && mouseLeaveHandler(event);\n      };\n    }\n\n    return eventHandlers;\n  };\n\n  return TableRow;\n}(React.PureComponent);\n\nTableRow.defaultProps = {\n  tagName: 'div'\n};\nTableRow.propTypes = {\n  isScrolling: PropTypes.bool,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  rowData: PropTypes.object.isRequired,\n  rowIndex: PropTypes.number.isRequired,\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  expandColumnKey: PropTypes.string,\n  depth: PropTypes.number,\n  rowEventHandlers: PropTypes.object,\n  rowRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  cellRenderer: PropTypes.func,\n  expandIconRenderer: PropTypes.func,\n  estimatedRowHeight: PropTypes.number,\n  getIsResetting: PropTypes.func,\n  onRowHover: PropTypes.func,\n  onRowExpand: PropTypes.func,\n  onRowHeightChange: PropTypes.func,\n  tagName: PropTypes.elementType\n};\nexport default TableRow;","map":{"version":3,"sources":["../src/TableRow.js"],"names":["TableRow","React","PureComponent","measured","componentDidMount","componentDidUpdate","prevState","render","isScrolling","className","style","columns","rowIndex","rowData","expandColumnKey","depth","rowEventHandlers","estimatedRowHeight","rowRenderer","cellRenderer","expandIconRenderer","Tag","rowKey","getIsResetting","onRowHover","onRowExpand","onRowHeightChange","rest","expandIcon","onExpand","_handleExpand","cells","column","columnIndex","renderElement","eventHandlers","height","otherStyles","_setRef","expanded","_measureHeight","initialMeasure","_getEventHandlers","handlers","Object","callback","event","mouseEnterHandler","hovered","mouseLeaveHandler","tagName","PropTypes","elementType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { renderElement } from './utils';\n\n/**\n * Row component for BaseTable\n */\nclass TableRow extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      measured: false,\n    };\n\n    this._setRef = this._setRef.bind(this);\n    this._handleExpand = this._handleExpand.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.estimatedRowHeight && this.props.rowIndex >= 0 && this._measureHeight(true);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.props.estimatedRowHeight &&\n      this.props.rowIndex >= 0 &&\n      // should not re-measure if it's updated after measured and reset\n      !this.props.getIsResetting() &&\n      this.state.measured &&\n      prevState.measured\n    ) {\n      this.setState({ measured: false }, () => this._measureHeight());\n    }\n  }\n\n  render() {\n    /* eslint-disable no-unused-vars */\n    const {\n      isScrolling,\n      className,\n      style,\n      columns,\n      rowIndex,\n      rowData,\n      expandColumnKey,\n      depth,\n      rowEventHandlers,\n      estimatedRowHeight,\n      rowRenderer,\n      cellRenderer,\n      expandIconRenderer,\n      tagName: Tag,\n      // omit the following from rest\n      rowKey,\n      getIsResetting,\n      onRowHover,\n      onRowExpand,\n      onRowHeightChange,\n      ...rest\n    } = this.props;\n    /* eslint-enable no-unused-vars */\n\n    const expandIcon = expandIconRenderer({ rowData, rowIndex, depth, onExpand: this._handleExpand });\n    let cells = columns.map((column, columnIndex) =>\n      cellRenderer({\n        isScrolling,\n        columns,\n        column,\n        columnIndex,\n        rowData,\n        rowIndex,\n        expandIcon: column.key === expandColumnKey && expandIcon,\n      })\n    );\n\n    if (rowRenderer) {\n      cells = renderElement(rowRenderer, { isScrolling, cells, columns, rowData, rowIndex, depth });\n    }\n\n    const eventHandlers = this._getEventHandlers(rowEventHandlers);\n\n    if (estimatedRowHeight && rowIndex >= 0) {\n      const { height, ...otherStyles } = style;\n      return (\n        <Tag\n          {...rest}\n          ref={this._setRef}\n          className={className}\n          style={this.state.measured ? style : otherStyles}\n          {...(this.state.measured && eventHandlers)}\n        >\n          {cells}\n        </Tag>\n      );\n    }\n\n    return (\n      <Tag {...rest} className={className} style={style} {...eventHandlers}>\n        {cells}\n      </Tag>\n    );\n  }\n\n  _setRef(ref) {\n    this.ref = ref;\n  }\n\n  _handleExpand(expanded) {\n    const { onRowExpand, rowData, rowIndex, rowKey } = this.props;\n    onRowExpand && onRowExpand({ expanded, rowData, rowIndex, rowKey });\n  }\n\n  _measureHeight(initialMeasure) {\n    if (!this.ref) return;\n\n    const { style, rowKey, onRowHeightChange, rowIndex, columns } = this.props;\n    const height = this.ref.getBoundingClientRect().height;\n    this.setState({ measured: true }, () => {\n      if (initialMeasure || height !== style.height)\n        onRowHeightChange(rowKey, height, rowIndex, columns[0] && !columns[0].__placeholder__ && columns[0].frozen);\n    });\n  }\n\n  _getEventHandlers(handlers = {}) {\n    const { rowData, rowIndex, rowKey, onRowHover } = this.props;\n    const eventHandlers = {};\n    Object.keys(handlers).forEach(eventKey => {\n      const callback = handlers[eventKey];\n      if (typeof callback === 'function') {\n        eventHandlers[eventKey] = event => {\n          callback({ rowData, rowIndex, rowKey, event });\n        };\n      }\n    });\n\n    if (onRowHover) {\n      const mouseEnterHandler = eventHandlers['onMouseEnter'];\n      eventHandlers['onMouseEnter'] = event => {\n        onRowHover({\n          hovered: true,\n          rowData,\n          rowIndex,\n          rowKey,\n          event,\n        });\n        mouseEnterHandler && mouseEnterHandler(event);\n      };\n\n      const mouseLeaveHandler = eventHandlers['onMouseLeave'];\n      eventHandlers['onMouseLeave'] = event => {\n        onRowHover({\n          hovered: false,\n          rowData,\n          rowIndex,\n          rowKey,\n          event,\n        });\n        mouseLeaveHandler && mouseLeaveHandler(event);\n      };\n    }\n\n    return eventHandlers;\n  }\n}\n\nTableRow.defaultProps = {\n  tagName: 'div',\n};\n\nTableRow.propTypes = {\n  isScrolling: PropTypes.bool,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  rowData: PropTypes.object.isRequired,\n  rowIndex: PropTypes.number.isRequired,\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  expandColumnKey: PropTypes.string,\n  depth: PropTypes.number,\n  rowEventHandlers: PropTypes.object,\n  rowRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  cellRenderer: PropTypes.func,\n  expandIconRenderer: PropTypes.func,\n  estimatedRowHeight: PropTypes.number,\n  getIsResetting: PropTypes.func,\n  onRowHover: PropTypes.func,\n  onRowExpand: PropTypes.func,\n  onRowHeightChange: PropTypes.func,\n  tagName: PropTypes.elementType,\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}