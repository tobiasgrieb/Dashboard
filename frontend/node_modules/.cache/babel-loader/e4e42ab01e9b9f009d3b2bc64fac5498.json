{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { FixedSizeGrid, VariableSizeGrid } from 'react-window';\nimport memoize from 'memoize-one';\nimport Header from './TableHeader';\n/**\n * A wrapper of the Grid for internal only\n */\n\nvar GridTable = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(GridTable, _React$PureComponent);\n\n  function GridTable(props) {\n    var _this;\n\n    _this = _React$PureComponent.call(this, props) || this;\n    _this._setHeaderRef = _this._setHeaderRef.bind(_assertThisInitialized(_this));\n    _this._setBodyRef = _this._setBodyRef.bind(_assertThisInitialized(_this));\n    _this._setInnerRef = _this._setInnerRef.bind(_assertThisInitialized(_this));\n    _this._itemKey = _this._itemKey.bind(_assertThisInitialized(_this));\n    _this._getBodyWidth = _this._getBodyWidth.bind(_assertThisInitialized(_this));\n    _this._handleItemsRendered = _this._handleItemsRendered.bind(_assertThisInitialized(_this));\n    _this._resetColumnWidthCache = memoize(function (bodyWidth) {\n      if (!_this.props.estimatedRowHeight) return;\n      _this.bodyRef && _this.bodyRef.resetAfterColumnIndex(0, false);\n    });\n    _this.renderRow = _this.renderRow.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = GridTable.prototype;\n\n  _proto.resetAfterRowIndex = function resetAfterRowIndex(rowIndex, shouldForceUpdate) {\n    if (rowIndex === void 0) {\n      rowIndex = 0;\n    }\n\n    if (!this.props.estimatedRowHeight) return;\n    this.bodyRef && this.bodyRef.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n  };\n\n  _proto.forceUpdateTable = function forceUpdateTable() {\n    this.headerRef && this.headerRef.forceUpdate();\n    this.bodyRef && this.bodyRef.forceUpdate();\n  };\n\n  _proto.scrollToPosition = function scrollToPosition(args) {\n    this.headerRef && this.headerRef.scrollTo(args.scrollLeft);\n    this.bodyRef && this.bodyRef.scrollTo(args);\n  };\n\n  _proto.scrollToTop = function scrollToTop(scrollTop) {\n    this.bodyRef && this.bodyRef.scrollTo({\n      scrollTop: scrollTop\n    });\n  };\n\n  _proto.scrollToLeft = function scrollToLeft(scrollLeft) {\n    this.headerRef && this.headerRef.scrollTo(scrollLeft);\n    this.bodyRef && this.bodyRef.scrollToPosition({\n      scrollLeft: scrollLeft\n    });\n  };\n\n  _proto.scrollToRow = function scrollToRow(rowIndex, align) {\n    if (rowIndex === void 0) {\n      rowIndex = 0;\n    }\n\n    if (align === void 0) {\n      align = 'auto';\n    }\n\n    this.bodyRef && this.bodyRef.scrollToItem({\n      rowIndex: rowIndex,\n      align: align\n    });\n  };\n\n  _proto.getTotalRowsHeight = function getTotalRowsHeight() {\n    var _this$props = this.props,\n        data = _this$props.data,\n        rowHeight = _this$props.rowHeight,\n        estimatedRowHeight = _this$props.estimatedRowHeight;\n\n    if (estimatedRowHeight) {\n      return this.innerRef && this.innerRef.clientHeight || data.length * estimatedRowHeight;\n    }\n\n    return data.length * rowHeight;\n  };\n\n  _proto.renderRow = function renderRow(args) {\n    var _this$props2 = this.props,\n        data = _this$props2.data,\n        columns = _this$props2.columns,\n        rowRenderer = _this$props2.rowRenderer;\n    var rowData = data[args.rowIndex];\n    return rowRenderer(_objectSpread({}, args, {\n      columns: columns,\n      rowData: rowData\n    }));\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        containerStyle = _this$props3.containerStyle,\n        classPrefix = _this$props3.classPrefix,\n        className = _this$props3.className,\n        data = _this$props3.data,\n        frozenData = _this$props3.frozenData,\n        width = _this$props3.width,\n        height = _this$props3.height,\n        rowHeight = _this$props3.rowHeight,\n        estimatedRowHeight = _this$props3.estimatedRowHeight,\n        getRowHeight = _this$props3.getRowHeight,\n        headerWidth = _this$props3.headerWidth,\n        bodyWidth = _this$props3.bodyWidth,\n        useIsScrolling = _this$props3.useIsScrolling,\n        onScroll = _this$props3.onScroll,\n        hoveredRowKey = _this$props3.hoveredRowKey,\n        overscanRowCount = _this$props3.overscanRowCount,\n        style = _this$props3.style,\n        onScrollbarPresenceChange = _this$props3.onScrollbarPresenceChange,\n        rest = _objectWithoutPropertiesLoose(_this$props3, [\"containerStyle\", \"classPrefix\", \"className\", \"data\", \"frozenData\", \"width\", \"height\", \"rowHeight\", \"estimatedRowHeight\", \"getRowHeight\", \"headerWidth\", \"bodyWidth\", \"useIsScrolling\", \"onScroll\", \"hoveredRowKey\", \"overscanRowCount\", \"style\", \"onScrollbarPresenceChange\"]);\n\n    var headerHeight = this._getHeaderHeight();\n\n    var frozenRowCount = frozenData.length;\n    var frozenRowsHeight = rowHeight * frozenRowCount;\n    var cls = cn(classPrefix + \"__table\", className);\n    var containerProps = containerStyle ? {\n      style: containerStyle\n    } : null;\n    var Grid = estimatedRowHeight ? VariableSizeGrid : FixedSizeGrid;\n\n    this._resetColumnWidthCache(bodyWidth);\n\n    return React.createElement(\"div\", _extends({\n      role: \"table\",\n      className: cls\n    }, containerProps), React.createElement(Grid, _extends({}, rest, {\n      className: classPrefix + \"__body\",\n      ref: this._setBodyRef,\n      innerRef: this._setInnerRef,\n      itemKey: this._itemKey,\n      data: data,\n      frozenData: frozenData,\n      width: width,\n      height: Math.max(height - headerHeight - frozenRowsHeight, 0),\n      rowHeight: estimatedRowHeight ? getRowHeight : rowHeight,\n      estimatedRowHeight: estimatedRowHeight,\n      rowCount: data.length,\n      overscanRowCount: overscanRowCount,\n      columnWidth: estimatedRowHeight ? this._getBodyWidth : bodyWidth,\n      columnCount: 1,\n      overscanColumnCount: 0,\n      useIsScrolling: useIsScrolling,\n      hoveredRowKey: hoveredRowKey,\n      onScroll: onScroll,\n      onItemsRendered: this._handleItemsRendered,\n      children: this.renderRow\n    })), headerHeight + frozenRowsHeight > 0 && // put header after body and reverse the display order via css\n    // to prevent header's shadow being covered by body\n    React.createElement(Header, _extends({}, rest, {\n      className: classPrefix + \"__header\",\n      ref: this._setHeaderRef,\n      data: data,\n      frozenData: frozenData,\n      width: width,\n      height: Math.min(headerHeight + frozenRowsHeight, height),\n      rowWidth: headerWidth,\n      rowHeight: rowHeight,\n      headerHeight: this.props.headerHeight,\n      headerRenderer: this.props.headerRenderer,\n      rowRenderer: this.props.rowRenderer,\n      hoveredRowKey: frozenRowCount > 0 ? hoveredRowKey : null\n    })));\n  };\n\n  _proto._setHeaderRef = function _setHeaderRef(ref) {\n    this.headerRef = ref;\n  };\n\n  _proto._setBodyRef = function _setBodyRef(ref) {\n    this.bodyRef = ref;\n  };\n\n  _proto._setInnerRef = function _setInnerRef(ref) {\n    this.innerRef = ref;\n  };\n\n  _proto._itemKey = function _itemKey(_ref) {\n    var rowIndex = _ref.rowIndex;\n    var _this$props4 = this.props,\n        data = _this$props4.data,\n        rowKey = _this$props4.rowKey;\n    return data[rowIndex][rowKey];\n  };\n\n  _proto._getHeaderHeight = function _getHeaderHeight() {\n    var headerHeight = this.props.headerHeight;\n\n    if (Array.isArray(headerHeight)) {\n      return headerHeight.reduce(function (sum, height) {\n        return sum + height;\n      }, 0);\n    }\n\n    return headerHeight;\n  };\n\n  _proto._getBodyWidth = function _getBodyWidth() {\n    return this.props.bodyWidth;\n  };\n\n  _proto._handleItemsRendered = function _handleItemsRendered(_ref2) {\n    var overscanRowStartIndex = _ref2.overscanRowStartIndex,\n        overscanRowStopIndex = _ref2.overscanRowStopIndex,\n        visibleRowStartIndex = _ref2.visibleRowStartIndex,\n        visibleRowStopIndex = _ref2.visibleRowStopIndex;\n    this.props.onRowsRendered({\n      overscanStartIndex: overscanRowStartIndex,\n      overscanStopIndex: overscanRowStopIndex,\n      startIndex: visibleRowStartIndex,\n      stopIndex: visibleRowStopIndex\n    });\n  };\n\n  return GridTable;\n}(React.PureComponent);\n\nGridTable.propTypes = {\n  containerStyle: PropTypes.object,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  headerHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]).isRequired,\n  headerWidth: PropTypes.number.isRequired,\n  bodyWidth: PropTypes.number.isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  estimatedRowHeight: PropTypes.number,\n  getRowHeight: PropTypes.func,\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  data: PropTypes.array.isRequired,\n  frozenData: PropTypes.array,\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  useIsScrolling: PropTypes.bool,\n  overscanRowCount: PropTypes.number,\n  hoveredRowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  style: PropTypes.object,\n  onScrollbarPresenceChange: PropTypes.func,\n  onScroll: PropTypes.func,\n  onRowsRendered: PropTypes.func,\n  headerRenderer: PropTypes.func.isRequired,\n  rowRenderer: PropTypes.func.isRequired\n};\nexport default GridTable;","map":{"version":3,"sources":["../src/GridTable.js"],"names":["GridTable","React","PureComponent","memoize","resetAfterRowIndex","rowIndex","forceUpdateTable","scrollToPosition","args","scrollToTop","scrollTop","scrollToLeft","scrollLeft","scrollToRow","align","getTotalRowsHeight","data","rowHeight","estimatedRowHeight","renderRow","columns","rowRenderer","rowData","render","containerStyle","classPrefix","className","frozenData","width","height","getRowHeight","headerWidth","bodyWidth","useIsScrolling","onScroll","hoveredRowKey","overscanRowCount","style","onScrollbarPresenceChange","rest","headerHeight","frozenRowCount","frozenRowsHeight","cls","cn","containerProps","Grid","Math","_setHeaderRef","_setBodyRef","_setInnerRef","_itemKey","rowKey","_getHeaderHeight","Array","sum","_getBodyWidth","_handleItemsRendered","overscanRowStartIndex","overscanRowStopIndex","visibleRowStartIndex","visibleRowStopIndex","overscanStartIndex","overscanStopIndex","startIndex","stopIndex","PropTypes","onRowsRendered","headerRenderer","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { FixedSizeGrid, VariableSizeGrid } from 'react-window';\nimport memoize from 'memoize-one';\n\nimport Header from './TableHeader';\n\n/**\n * A wrapper of the Grid for internal only\n */\nclass GridTable extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this._setHeaderRef = this._setHeaderRef.bind(this);\n    this._setBodyRef = this._setBodyRef.bind(this);\n    this._setInnerRef = this._setInnerRef.bind(this);\n    this._itemKey = this._itemKey.bind(this);\n    this._getBodyWidth = this._getBodyWidth.bind(this);\n    this._handleItemsRendered = this._handleItemsRendered.bind(this);\n    this._resetColumnWidthCache = memoize(bodyWidth => {\n      if (!this.props.estimatedRowHeight) return;\n      this.bodyRef && this.bodyRef.resetAfterColumnIndex(0, false);\n    });\n\n    this.renderRow = this.renderRow.bind(this);\n  }\n\n  resetAfterRowIndex(rowIndex = 0, shouldForceUpdate) {\n    if (!this.props.estimatedRowHeight) return;\n    this.bodyRef && this.bodyRef.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n  }\n\n  forceUpdateTable() {\n    this.headerRef && this.headerRef.forceUpdate();\n    this.bodyRef && this.bodyRef.forceUpdate();\n  }\n\n  scrollToPosition(args) {\n    this.headerRef && this.headerRef.scrollTo(args.scrollLeft);\n    this.bodyRef && this.bodyRef.scrollTo(args);\n  }\n\n  scrollToTop(scrollTop) {\n    this.bodyRef && this.bodyRef.scrollTo({ scrollTop });\n  }\n\n  scrollToLeft(scrollLeft) {\n    this.headerRef && this.headerRef.scrollTo(scrollLeft);\n    this.bodyRef && this.bodyRef.scrollToPosition({ scrollLeft });\n  }\n\n  scrollToRow(rowIndex = 0, align = 'auto') {\n    this.bodyRef && this.bodyRef.scrollToItem({ rowIndex, align });\n  }\n\n  getTotalRowsHeight() {\n    const { data, rowHeight, estimatedRowHeight } = this.props;\n\n    if (estimatedRowHeight) {\n      return (this.innerRef && this.innerRef.clientHeight) || data.length * estimatedRowHeight;\n    }\n    return data.length * rowHeight;\n  }\n\n  renderRow(args) {\n    const { data, columns, rowRenderer } = this.props;\n    const rowData = data[args.rowIndex];\n    return rowRenderer({ ...args, columns, rowData });\n  }\n\n  render() {\n    const {\n      containerStyle,\n      classPrefix,\n      className,\n      data,\n      frozenData,\n      width,\n      height,\n      rowHeight,\n      estimatedRowHeight,\n      getRowHeight,\n      headerWidth,\n      bodyWidth,\n      useIsScrolling,\n      onScroll,\n      hoveredRowKey,\n      overscanRowCount,\n      // omit from rest\n      style,\n      onScrollbarPresenceChange,\n      ...rest\n    } = this.props;\n    const headerHeight = this._getHeaderHeight();\n    const frozenRowCount = frozenData.length;\n    const frozenRowsHeight = rowHeight * frozenRowCount;\n    const cls = cn(`${classPrefix}__table`, className);\n    const containerProps = containerStyle ? { style: containerStyle } : null;\n    const Grid = estimatedRowHeight ? VariableSizeGrid : FixedSizeGrid;\n\n    this._resetColumnWidthCache(bodyWidth);\n    return (\n      <div role=\"table\" className={cls} {...containerProps}>\n        <Grid\n          {...rest}\n          className={`${classPrefix}__body`}\n          ref={this._setBodyRef}\n          innerRef={this._setInnerRef}\n          itemKey={this._itemKey}\n          data={data}\n          frozenData={frozenData}\n          width={width}\n          height={Math.max(height - headerHeight - frozenRowsHeight, 0)}\n          rowHeight={estimatedRowHeight ? getRowHeight : rowHeight}\n          estimatedRowHeight={estimatedRowHeight}\n          rowCount={data.length}\n          overscanRowCount={overscanRowCount}\n          columnWidth={estimatedRowHeight ? this._getBodyWidth : bodyWidth}\n          columnCount={1}\n          overscanColumnCount={0}\n          useIsScrolling={useIsScrolling}\n          hoveredRowKey={hoveredRowKey}\n          onScroll={onScroll}\n          onItemsRendered={this._handleItemsRendered}\n          children={this.renderRow}\n        />\n        {headerHeight + frozenRowsHeight > 0 && (\n          // put header after body and reverse the display order via css\n          // to prevent header's shadow being covered by body\n          <Header\n            {...rest}\n            className={`${classPrefix}__header`}\n            ref={this._setHeaderRef}\n            data={data}\n            frozenData={frozenData}\n            width={width}\n            height={Math.min(headerHeight + frozenRowsHeight, height)}\n            rowWidth={headerWidth}\n            rowHeight={rowHeight}\n            headerHeight={this.props.headerHeight}\n            headerRenderer={this.props.headerRenderer}\n            rowRenderer={this.props.rowRenderer}\n            hoveredRowKey={frozenRowCount > 0 ? hoveredRowKey : null}\n          />\n        )}\n      </div>\n    );\n  }\n\n  _setHeaderRef(ref) {\n    this.headerRef = ref;\n  }\n\n  _setBodyRef(ref) {\n    this.bodyRef = ref;\n  }\n\n  _setInnerRef(ref) {\n    this.innerRef = ref;\n  }\n\n  _itemKey({ rowIndex }) {\n    const { data, rowKey } = this.props;\n    return data[rowIndex][rowKey];\n  }\n\n  _getHeaderHeight() {\n    const { headerHeight } = this.props;\n    if (Array.isArray(headerHeight)) {\n      return headerHeight.reduce((sum, height) => sum + height, 0);\n    }\n    return headerHeight;\n  }\n\n  _getBodyWidth() {\n    return this.props.bodyWidth;\n  }\n\n  _handleItemsRendered({ overscanRowStartIndex, overscanRowStopIndex, visibleRowStartIndex, visibleRowStopIndex }) {\n    this.props.onRowsRendered({\n      overscanStartIndex: overscanRowStartIndex,\n      overscanStopIndex: overscanRowStopIndex,\n      startIndex: visibleRowStartIndex,\n      stopIndex: visibleRowStopIndex,\n    });\n  }\n}\n\nGridTable.propTypes = {\n  containerStyle: PropTypes.object,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  headerHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]).isRequired,\n  headerWidth: PropTypes.number.isRequired,\n  bodyWidth: PropTypes.number.isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  estimatedRowHeight: PropTypes.number,\n  getRowHeight: PropTypes.func,\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  data: PropTypes.array.isRequired,\n  frozenData: PropTypes.array,\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  useIsScrolling: PropTypes.bool,\n  overscanRowCount: PropTypes.number,\n  hoveredRowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  style: PropTypes.object,\n  onScrollbarPresenceChange: PropTypes.func,\n  onScroll: PropTypes.func,\n  onRowsRendered: PropTypes.func,\n  headerRenderer: PropTypes.func.isRequired,\n  rowRenderer: PropTypes.func.isRequired,\n};\n\nexport default GridTable;\n"]},"metadata":{},"sourceType":"module"}