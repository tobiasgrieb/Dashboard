{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport var Alignment = {\n  LEFT: 'left',\n  CENTER: 'center',\n  RIGHT: 'right'\n};\nexport var FrozenDirection = {\n  LEFT: 'left',\n  RIGHT: 'right',\n  DEFAULT: true,\n  NONE: false\n};\n/**\n * Column for BaseTable\n */\n\nvar Column = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Column, _React$Component);\n\n  function Column() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  return Column;\n}(React.Component);\n\nColumn.propTypes = {\n  /**\n   * Class name for the column cell, could be a callback to return the class name\n   * The callback is of the shape of `({ cellData, columns, column, columnIndex, rowData, rowIndex }) => string`\n   */\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n  /**\n   * Class name for the column header, could be a callback to return the class name\n   * The callback is of the shape of `({ columns, column, columnIndex, headerIndex }) => string`\n   */\n  headerClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n  /**\n   * Custom style for the column cell, including the header cells\n   */\n  style: PropTypes.object,\n\n  /**\n   * Title for the column header\n   */\n  title: PropTypes.string,\n\n  /**\n   * Data key for the column cell, could be \"a.b.c\"\n   */\n  dataKey: PropTypes.string,\n\n  /**\n   * Custom cell data getter\n   * The handler is of the shape of `({ columns, column, columnIndex, rowData, rowIndex }) => node`\n   */\n  dataGetter: PropTypes.func,\n\n  /**\n   * Alignment of the column cell\n   */\n  align: PropTypes.oneOf(['left', 'center', 'right']),\n\n  /**\n   * Flex grow style, defaults to 0\n   */\n  flexGrow: PropTypes.number,\n\n  /**\n   * Flex shrink style, defaults to 1 for flexible table and 0 for fixed table\n   */\n  flexShrink: PropTypes.number,\n\n  /**\n   * The width of the column, gutter width is not included\n   */\n  width: PropTypes.number.isRequired,\n\n  /**\n   * Maximum width of the column, used if the column is resizable\n   */\n  maxWidth: PropTypes.number,\n\n  /**\n   * Minimum width of the column, used if the column is resizable\n   */\n  minWidth: PropTypes.number,\n\n  /**\n   * Whether the column is frozen and what's the frozen side\n   */\n  frozen: PropTypes.oneOf(['left', 'right', true, false]),\n\n  /**\n   * Whether the column is hidden\n   */\n  hidden: PropTypes.bool,\n\n  /**\n   * Whether the column is resizable, defaults to false\n   */\n  resizable: PropTypes.bool,\n\n  /**\n   * Whether the column is sortable, defaults to false\n   */\n  sortable: PropTypes.bool,\n\n  /**\n   * Custom column cell renderer\n   * The renderer receives props `{ cellData, columns, column, columnIndex, rowData, rowIndex, container, isScrolling }`\n   */\n  cellRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n\n  /**\n   * Custom column header renderer\n   * The renderer receives props `{ columns, column, columnIndex, headerIndex, container }`\n   */\n  headerRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element])\n};\nColumn.Alignment = Alignment;\nColumn.FrozenDirection = FrozenDirection;\nexport default Column;","map":{"version":3,"sources":["../src/Column.js"],"names":["Alignment","LEFT","CENTER","RIGHT","FrozenDirection","DEFAULT","NONE","Column","React","Component","className","PropTypes","headerClassName","style","title","dataKey","dataGetter","align","flexGrow","flexShrink","width","maxWidth","minWidth","frozen","hidden","resizable","sortable","cellRenderer","headerRenderer"],"mappings":";AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AAEA,OAAO,IAAMA,SAAS,GAAG;AACvBC,EAAAA,IAAI,EADmB,MAAA;AAEvBC,EAAAA,MAAM,EAFiB,QAAA;AAGvBC,EAAAA,KAAK,EAAE;AAHgB,CAAlB;AAMP,OAAO,IAAMC,eAAe,GAAG;AAC7BH,EAAAA,IAAI,EADyB,MAAA;AAE7BE,EAAAA,KAAK,EAFwB,OAAA;AAG7BE,EAAAA,OAAO,EAHsB,IAAA;AAI7BC,EAAAA,IAAI,EAAE;AAJuB,CAAxB;AAOP;;;;IAGMC,M;;;;;;;;EAAeC,KAAK,CAACC,S;;AAE3BF,MAAM,CAANA,SAAAA,GAAmB;AACjB;;;;AAIAG,EAAAA,SAAS,EAAEC,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAL1C,IAKc,CAApBA,CALM;;AAMjB;;;;AAIAC,EAAAA,eAAe,EAAED,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAVhD,IAUoB,CAApBA,CAVA;;AAWjB;;;AAGAE,EAAAA,KAAK,EAAEF,SAAS,CAdC,MAAA;;AAejB;;;AAGAG,EAAAA,KAAK,EAAEH,SAAS,CAlBC,MAAA;;AAmBjB;;;AAGAI,EAAAA,OAAO,EAAEJ,SAAS,CAtBD,MAAA;;AAuBjB;;;;AAIAK,EAAAA,UAAU,EAAEL,SAAS,CA3BJ,IAAA;;AA4BjB;;;AAGAM,EAAAA,KAAK,EAAEN,SAAS,CAATA,KAAAA,CAAgB,CAAA,MAAA,EAAA,QAAA,EA/BN,OA+BM,CAAhBA,CA/BU;;AAgCjB;;;AAGAO,EAAAA,QAAQ,EAAEP,SAAS,CAnCF,MAAA;;AAoCjB;;;AAGAQ,EAAAA,UAAU,EAAER,SAAS,CAvCJ,MAAA;;AAwCjB;;;AAGAS,EAAAA,KAAK,EAAET,SAAS,CAATA,MAAAA,CA3CU,UAAA;;AA4CjB;;;AAGAU,EAAAA,QAAQ,EAAEV,SAAS,CA/CF,MAAA;;AAgDjB;;;AAGAW,EAAAA,QAAQ,EAAEX,SAAS,CAnDF,MAAA;;AAoDjB;;;AAGAY,EAAAA,MAAM,EAAEZ,SAAS,CAATA,KAAAA,CAAgB,CAAA,MAAA,EAAA,OAAA,EAAA,IAAA,EAvDP,KAuDO,CAAhBA,CAvDS;;AAwDjB;;;AAGAa,EAAAA,MAAM,EAAEb,SAAS,CA3DA,IAAA;;AA4DjB;;;AAGAc,EAAAA,SAAS,EAAEd,SAAS,CA/DH,IAAA;;AAgEjB;;;AAGAe,EAAAA,QAAQ,EAAEf,SAAS,CAnEF,IAAA;;AAoEjB;;;;AAIAgB,EAAAA,YAAY,EAAEhB,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,IAAA,EAAiBA,SAAS,CAxE3C,OAwEiB,CAApBA,CAxEG;;AAyEjB;;;;AAIAiB,EAAAA,cAAc,EAAEjB,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,IAAA,EAAiBA,SAAS,CAA9CA,OAAoB,CAApBA;AA7EC,CAAnBJ;AAgFAA,MAAM,CAANA,SAAAA,GAAAA,SAAAA;AACAA,MAAM,CAANA,eAAAA,GAAAA,eAAAA;AAEA,eAAA,MAAA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Alignment = {\n  LEFT: 'left',\n  CENTER: 'center',\n  RIGHT: 'right',\n};\n\nexport const FrozenDirection = {\n  LEFT: 'left',\n  RIGHT: 'right',\n  DEFAULT: true,\n  NONE: false,\n};\n\n/**\n * Column for BaseTable\n */\nclass Column extends React.Component {}\n\nColumn.propTypes = {\n  /**\n   * Class name for the column cell, could be a callback to return the class name\n   * The callback is of the shape of `({ cellData, columns, column, columnIndex, rowData, rowIndex }) => string`\n   */\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  /**\n   * Class name for the column header, could be a callback to return the class name\n   * The callback is of the shape of `({ columns, column, columnIndex, headerIndex }) => string`\n   */\n  headerClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  /**\n   * Custom style for the column cell, including the header cells\n   */\n  style: PropTypes.object,\n  /**\n   * Title for the column header\n   */\n  title: PropTypes.string,\n  /**\n   * Data key for the column cell, could be \"a.b.c\"\n   */\n  dataKey: PropTypes.string,\n  /**\n   * Custom cell data getter\n   * The handler is of the shape of `({ columns, column, columnIndex, rowData, rowIndex }) => node`\n   */\n  dataGetter: PropTypes.func,\n  /**\n   * Alignment of the column cell\n   */\n  align: PropTypes.oneOf(['left', 'center', 'right']),\n  /**\n   * Flex grow style, defaults to 0\n   */\n  flexGrow: PropTypes.number,\n  /**\n   * Flex shrink style, defaults to 1 for flexible table and 0 for fixed table\n   */\n  flexShrink: PropTypes.number,\n  /**\n   * The width of the column, gutter width is not included\n   */\n  width: PropTypes.number.isRequired,\n  /**\n   * Maximum width of the column, used if the column is resizable\n   */\n  maxWidth: PropTypes.number,\n  /**\n   * Minimum width of the column, used if the column is resizable\n   */\n  minWidth: PropTypes.number,\n  /**\n   * Whether the column is frozen and what's the frozen side\n   */\n  frozen: PropTypes.oneOf(['left', 'right', true, false]),\n  /**\n   * Whether the column is hidden\n   */\n  hidden: PropTypes.bool,\n  /**\n   * Whether the column is resizable, defaults to false\n   */\n  resizable: PropTypes.bool,\n  /**\n   * Whether the column is sortable, defaults to false\n   */\n  sortable: PropTypes.bool,\n  /**\n   * Custom column cell renderer\n   * The renderer receives props `{ cellData, columns, column, columnIndex, rowData, rowIndex, container, isScrolling }`\n   */\n  cellRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom column header renderer\n   * The renderer receives props `{ columns, column, columnIndex, headerIndex, container }`\n   */\n  headerRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n};\n\nColumn.Alignment = Alignment;\nColumn.FrozenDirection = FrozenDirection;\n\nexport default Column;\n"]},"metadata":{},"sourceType":"module"}