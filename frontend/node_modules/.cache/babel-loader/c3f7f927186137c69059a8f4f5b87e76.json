{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n/**\n * Decorator component that automatically adjusts the width and height of a single child\n */\n\nvar AutoResizer = function AutoResizer(_ref) {\n  var className = _ref.className,\n      width = _ref.width,\n      height = _ref.height,\n      children = _ref.children,\n      onResize = _ref.onResize;\n  var disableWidth = typeof width === 'number';\n  var disableHeight = typeof height === 'number';\n\n  if (disableWidth && disableHeight) {\n    return React.createElement(\"div\", {\n      className: className,\n      style: {\n        width: width,\n        height: height,\n        position: 'relative'\n      }\n    }, children({\n      width: width,\n      height: height\n    }));\n  }\n\n  return React.createElement(AutoSizer, {\n    className: className,\n    disableWidth: disableWidth,\n    disableHeight: disableHeight,\n    onResize: onResize\n  }, function (size) {\n    return children({\n      width: disableWidth ? width : size.width,\n      height: disableHeight ? height : size.height\n    });\n  });\n};\n\nAutoResizer.propTypes = {\n  /**\n   * Class name for the component\n   */\n  className: PropTypes.string,\n\n  /**\n   * the width of the component, will be the container's width if not set\n   */\n  width: PropTypes.number,\n\n  /**\n   * the height of the component, will be the container's width if not set\n   */\n  height: PropTypes.number,\n\n  /**\n   * A callback function to render the children component\n   * The handler is of the shape of `({ width, height }) => node`\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * A callback function when the size of the table container changed if the width and height are not set\n   * The handler is of the shape of `({ width, height }) => *`\n   */\n  onResize: PropTypes.func\n};\nexport default AutoResizer;","map":{"version":3,"sources":["../src/AutoResizer.js"],"names":["AutoResizer","className","width","height","children","onResize","disableWidth","disableHeight","position","size","PropTypes","func"],"mappings":"AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,8BAAA;AAEA;;;;AAGA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAAsD;AAAA,MAAnDC,SAAmD,GAAA,IAAA,CAAnDA,SAAmD;AAAA,MAAxCC,KAAwC,GAAA,IAAA,CAAxCA,KAAwC;AAAA,MAAjCC,MAAiC,GAAA,IAAA,CAAjCA,MAAiC;AAAA,MAAzBC,QAAyB,GAAA,IAAA,CAAzBA,QAAyB;AAAA,MAAfC,QAAe,GAAA,IAAA,CAAfA,QAAe;AACxE,MAAMC,YAAY,GAAG,OAAA,KAAA,KAArB,QAAA;AACA,MAAMC,aAAa,GAAG,OAAA,MAAA,KAAtB,QAAA;;AAEA,MAAID,YAAY,IAAhB,aAAA,EAAmC;AACjC,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAd,SAAA;AAA2B,MAAA,KAAK,EAAE;AAAEJ,QAAAA,KAAK,EAAP,KAAA;AAASC,QAAAA,MAAM,EAAf,MAAA;AAAiBK,QAAAA,QAAQ,EAAE;AAA3B;AAAlC,KAAA,EACGJ,QAAQ,CAAC;AAAEF,MAAAA,KAAK,EAAP,KAAA;AAASC,MAAAA,MAAM,EAANA;AAAT,KAAD,CADX,CADF;AAKD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,IAAA,SAAS,EAApB,SAAA;AAAiC,IAAA,YAAY,EAA7C,YAAA;AAA6D,IAAA,aAAa,EAA1E,aAAA;AAA2F,IAAA,QAAQ,EAAEE;AAArG,GAAA,EACG,UAAA,IAAA,EAAI;AAAA,WACHD,QAAQ,CAAC;AACPF,MAAAA,KAAK,EAAEI,YAAY,GAAA,KAAA,GAAWG,IAAI,CAD3B,KAAA;AAEPN,MAAAA,MAAM,EAAEI,aAAa,GAAA,MAAA,GAAYE,IAAI,CAACN;AAF/B,KAAD,CADL;AAFT,GACE,CADF;AAZF,CAAA;;AAwBAH,WAAW,CAAXA,SAAAA,GAAwB;AACtB;;;AAGAC,EAAAA,SAAS,EAAES,SAAS,CAJE,MAAA;;AAKtB;;;AAGAR,EAAAA,KAAK,EAAEQ,SAAS,CARM,MAAA;;AAStB;;;AAGAP,EAAAA,MAAM,EAAEO,SAAS,CAZK,MAAA;;AAatB;;;;AAIAN,EAAAA,QAAQ,EAAEM,SAAS,CAATA,IAAAA,CAjBY,UAAA;;AAkBtB;;;;AAIAL,EAAAA,QAAQ,EAAEK,SAAS,CAACC;AAtBE,CAAxBX;AAyBA,eAAA,WAAA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\n/**\n * Decorator component that automatically adjusts the width and height of a single child\n */\nconst AutoResizer = ({ className, width, height, children, onResize }) => {\n  const disableWidth = typeof width === 'number';\n  const disableHeight = typeof height === 'number';\n\n  if (disableWidth && disableHeight) {\n    return (\n      <div className={className} style={{ width, height, position: 'relative' }}>\n        {children({ width, height })}\n      </div>\n    );\n  }\n\n  return (\n    <AutoSizer className={className} disableWidth={disableWidth} disableHeight={disableHeight} onResize={onResize}>\n      {size =>\n        children({\n          width: disableWidth ? width : size.width,\n          height: disableHeight ? height : size.height,\n        })\n      }\n    </AutoSizer>\n  );\n};\n\nAutoResizer.propTypes = {\n  /**\n   * Class name for the component\n   */\n  className: PropTypes.string,\n  /**\n   * the width of the component, will be the container's width if not set\n   */\n  width: PropTypes.number,\n  /**\n   * the height of the component, will be the container's width if not set\n   */\n  height: PropTypes.number,\n  /**\n   * A callback function to render the children component\n   * The handler is of the shape of `({ width, height }) => node`\n   */\n  children: PropTypes.func.isRequired,\n  /**\n   * A callback function when the size of the table container changed if the width and height are not set\n   * The handler is of the shape of `({ width, height }) => *`\n   */\n  onResize: PropTypes.func,\n};\n\nexport default AutoResizer;\n"]},"metadata":{},"sourceType":"module"}