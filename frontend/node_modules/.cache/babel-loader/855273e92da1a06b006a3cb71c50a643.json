{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport memoize from 'memoize-one';\nimport GridTable from './GridTable';\nimport TableHeaderRow from './TableHeaderRow';\nimport TableRow from './TableRow';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableCell from './TableCell';\nimport Column, { Alignment, FrozenDirection } from './Column';\nimport SortOrder from './SortOrder';\nimport ExpandIcon from './ExpandIcon';\nimport SortIndicator from './SortIndicator';\nimport ColumnResizer from './ColumnResizer';\nimport ColumnManager from './ColumnManager';\nimport { renderElement, normalizeColumns, getScrollbarSize as defaultGetScrollbarSize, isObjectEqual, callOrReturn, hasChildren, flattenOnKeys, cloneArray, getValue, throttle, debounce, noop } from './utils';\nvar getColumns = memoize(function (columns, children) {\n  return columns || normalizeColumns(children);\n});\n\nvar getContainerStyle = function getContainerStyle(width, maxWidth, height) {\n  return {\n    width: width,\n    maxWidth: maxWidth,\n    height: height,\n    overflow: 'hidden'\n  };\n};\n\nvar DEFAULT_COMPONENTS = {\n  TableCell: TableCell,\n  TableHeaderCell: TableHeaderCell,\n  ExpandIcon: ExpandIcon,\n  SortIndicator: SortIndicator\n};\nvar RESIZE_THROTTLE_WAIT = 50; // used for memoization\n\nvar EMPTY_ARRAY = [];\n/**\n * React table component\n */\n\nvar BaseTable = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(BaseTable, _React$PureComponent);\n\n  function BaseTable(props) {\n    var _this;\n\n    _this = _React$PureComponent.call(this, props) || this;\n    var columns = props.columns,\n        children = props.children,\n        defaultExpandedRowKeys = props.defaultExpandedRowKeys;\n    _this.state = {\n      scrollbarSize: 0,\n      hoveredRowKey: null,\n      resizingKey: null,\n      resizingWidth: 0,\n      expandedRowKeys: cloneArray(defaultExpandedRowKeys)\n    };\n    _this.columnManager = new ColumnManager(getColumns(columns, children), props.fixed);\n    _this._setContainerRef = _this._setContainerRef.bind(_assertThisInitialized(_this));\n    _this._setMainTableRef = _this._setMainTableRef.bind(_assertThisInitialized(_this));\n    _this._setLeftTableRef = _this._setLeftTableRef.bind(_assertThisInitialized(_this));\n    _this._setRightTableRef = _this._setRightTableRef.bind(_assertThisInitialized(_this));\n    _this.renderExpandIcon = _this.renderExpandIcon.bind(_assertThisInitialized(_this));\n    _this.renderRow = _this.renderRow.bind(_assertThisInitialized(_this));\n    _this.renderRowCell = _this.renderRowCell.bind(_assertThisInitialized(_this));\n    _this.renderHeader = _this.renderHeader.bind(_assertThisInitialized(_this));\n    _this.renderHeaderCell = _this.renderHeaderCell.bind(_assertThisInitialized(_this));\n    _this._handleScroll = _this._handleScroll.bind(_assertThisInitialized(_this));\n    _this._handleVerticalScroll = _this._handleVerticalScroll.bind(_assertThisInitialized(_this));\n    _this._handleRowsRendered = _this._handleRowsRendered.bind(_assertThisInitialized(_this));\n    _this._handleRowHover = _this._handleRowHover.bind(_assertThisInitialized(_this));\n    _this._handleRowExpand = _this._handleRowExpand.bind(_assertThisInitialized(_this));\n    _this._handleColumnResize = throttle(_this._handleColumnResize.bind(_assertThisInitialized(_this)), RESIZE_THROTTLE_WAIT);\n    _this._handleColumnResizeStart = _this._handleColumnResizeStart.bind(_assertThisInitialized(_this));\n    _this._handleColumnResizeStop = _this._handleColumnResizeStop.bind(_assertThisInitialized(_this));\n    _this._handleColumnSort = _this._handleColumnSort.bind(_assertThisInitialized(_this));\n    _this._handleFrozenRowHeightChange = _this._handleFrozenRowHeightChange.bind(_assertThisInitialized(_this));\n    _this._handleRowHeightChange = _this._handleRowHeightChange.bind(_assertThisInitialized(_this));\n    _this._getLeftTableContainerStyle = memoize(getContainerStyle);\n    _this._getRightTableContainerStyle = memoize(getContainerStyle);\n    _this._flattenOnKeys = memoize(function (tree, keys, dataKey) {\n      _this._depthMap = {};\n      return flattenOnKeys(tree, keys, _this._depthMap, dataKey);\n    });\n    _this._resetColumnManager = memoize(function (columns, fixed) {\n      _this.columnManager.reset(columns, fixed);\n\n      if (_this.props.estimatedRowHeight && fixed) {\n        if (!_this.columnManager.hasLeftFrozenColumns()) {\n          _this._leftRowHeightMap = {};\n        }\n\n        if (!_this.columnManager.hasRightFrozenColumns()) {\n          _this._rightRowHeightMap = {};\n        }\n      }\n    }, function (newArgs, lastArgs) {\n      return isObjectEqual(newArgs, lastArgs, _this.props.ignoreFunctionInColumnCompare);\n    });\n    _this._isResetting = false;\n    _this._resetIndex = null;\n    _this._rowHeightMap = {};\n    _this._rowHeightMapBuffer = {};\n    _this._mainRowHeightMap = {};\n    _this._leftRowHeightMap = {};\n    _this._rightRowHeightMap = {};\n    _this._getRowHeight = _this._getRowHeight.bind(_assertThisInitialized(_this));\n    _this._updateRowHeights = debounce(function () {\n      _this._isResetting = true;\n      _this._rowHeightMap = _objectSpread({}, _this._rowHeightMap, {}, _this._rowHeightMapBuffer);\n\n      _this.resetAfterRowIndex(_this._resetIndex, false);\n\n      _this._rowHeightMapBuffer = {};\n      _this._resetIndex = null;\n\n      _this.forceUpdateTable();\n\n      _this.forceUpdate();\n\n      _this._isResetting = false;\n    }, 0);\n    _this._scroll = {\n      scrollLeft: 0,\n      scrollTop: 0\n    };\n    _this._scrollHeight = 0;\n    _this._lastScannedRowIndex = -1;\n    _this._hasDataChangedSinceEndReached = true;\n    _this._data = props.data;\n    _this._depthMap = {};\n    _this._horizontalScrollbarSize = 0;\n    _this._verticalScrollbarSize = 0;\n    _this._scrollbarPresenceChanged = false;\n    return _this;\n  }\n  /**\n   * Get the DOM node of the table\n   */\n\n\n  var _proto = BaseTable.prototype;\n\n  _proto.getDOMNode = function getDOMNode() {\n    return this.tableNode;\n  }\n  /**\n   * Get the column manager\n   */\n  ;\n\n  _proto.getColumnManager = function getColumnManager() {\n    return this.columnManager;\n  }\n  /**\n   * Get internal `expandedRowKeys` state\n   */\n  ;\n\n  _proto.getExpandedRowKeys = function getExpandedRowKeys() {\n    var expandedRowKeys = this.props.expandedRowKeys;\n    return expandedRowKeys !== undefined ? expandedRowKeys || EMPTY_ARRAY : this.state.expandedRowKeys;\n  }\n  /**\n   * Get the expanded state, fallback to normal state if not expandable.\n   */\n  ;\n\n  _proto.getExpandedState = function getExpandedState() {\n    return {\n      expandedData: this._data,\n      expandedRowKeys: this.getExpandedRowKeys(),\n      expandedDepthMap: this._depthMap\n    };\n  }\n  /**\n   * Get the total height of all rows, including expanded rows.\n   */\n  ;\n\n  _proto.getTotalRowsHeight = function getTotalRowsHeight() {\n    var _this$props = this.props,\n        rowHeight = _this$props.rowHeight,\n        estimatedRowHeight = _this$props.estimatedRowHeight;\n\n    if (estimatedRowHeight) {\n      return this.table ? this.table.getTotalRowsHeight() : this._data.length * estimatedRowHeight;\n    }\n\n    return this._data.length * rowHeight;\n  }\n  /**\n   * Get the total width of all columns.\n   */\n  ;\n\n  _proto.getTotalColumnsWidth = function getTotalColumnsWidth() {\n    return this.columnManager.getColumnsWidth();\n  }\n  /**\n   * Forcefully re-render the inner Grid component.\n   *\n   * Calling `forceUpdate` on `Table` may not re-render the inner Grid since it uses `shallowCompare` as a performance optimization.\n   * Use this method if you want to manually trigger a re-render.\n   * This may be appropriate if the underlying row data has changed but the row sizes themselves have not.\n   */\n  ;\n\n  _proto.forceUpdateTable = function forceUpdateTable() {\n    this.table && this.table.forceUpdateTable();\n    this.leftTable && this.leftTable.forceUpdateTable();\n    this.rightTable && this.rightTable.forceUpdateTable();\n  }\n  /**\n   * Reset cached offsets for positioning after a specific rowIndex, should be used only in dynamic mode(estimatedRowHeight is provided)\n   *\n   * @param {number} rowIndex\n   * @param {boolean} shouldForceUpdate\n   */\n  ;\n\n  _proto.resetAfterRowIndex = function resetAfterRowIndex(rowIndex, shouldForceUpdate) {\n    if (rowIndex === void 0) {\n      rowIndex = 0;\n    }\n\n    if (shouldForceUpdate === void 0) {\n      shouldForceUpdate = true;\n    }\n\n    if (!this.props.estimatedRowHeight) return;\n    this.table && this.table.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n    this.leftTable && this.leftTable.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n    this.rightTable && this.rightTable.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n  }\n  /**\n   * Reset row height cache, useful if `data` changed entirely, should be used only in dynamic mode(estimatedRowHeight is provided)\n   */\n  ;\n\n  _proto.resetRowHeightCache = function resetRowHeightCache() {\n    if (!this.props.estimatedRowHeight) return;\n    this._resetIndex = null;\n    this._rowHeightMapBuffer = {};\n    this._rowHeightMap = {};\n    this._mainRowHeightMap = {};\n    this._leftRowHeightMap = {};\n    this._rightRowHeightMap = {};\n  }\n  /**\n   * Scroll to the specified offset.\n   * Useful for animating position changes.\n   *\n   * @param {object} offset\n   */\n  ;\n\n  _proto.scrollToPosition = function scrollToPosition(offset) {\n    this._scroll = offset;\n    this.table && this.table.scrollToPosition(offset);\n    this.leftTable && this.leftTable.scrollToTop(offset.scrollTop);\n    this.rightTable && this.rightTable.scrollToTop(offset.scrollTop);\n  }\n  /**\n   * Scroll to the specified offset vertically.\n   *\n   * @param {number} scrollTop\n   */\n  ;\n\n  _proto.scrollToTop = function scrollToTop(scrollTop) {\n    this._scroll.scrollTop = scrollTop;\n    this.table && this.table.scrollToPosition(this._scroll);\n    this.leftTable && this.leftTable.scrollToTop(scrollTop);\n    this.rightTable && this.rightTable.scrollToTop(scrollTop);\n  }\n  /**\n   * Scroll to the specified offset horizontally.\n   *\n   * @param {number} scrollLeft\n   */\n  ;\n\n  _proto.scrollToLeft = function scrollToLeft(scrollLeft) {\n    this._scroll.scrollLeft = scrollLeft;\n    this.table && this.table.scrollToPosition(this._scroll);\n  }\n  /**\n   * Scroll to the specified row.\n   * By default, the table will scroll as little as possible to ensure the row is visible.\n   * You can control the alignment of the row though by specifying an align property. Acceptable values are:\n   *\n   * - `auto` (default) - Scroll as little as possible to ensure the row is visible.\n   * - `smart` - Same as `auto` if it is less than one viewport away, or it's the same as`center`.\n   * - `center` - Center align the row within the table.\n   * - `end` - Align the row to the bottom side of the table.\n   * - `start` - Align the row to the top side of the table.\n   *\n   * @param {number} rowIndex\n   * @param {string} align\n   */\n  ;\n\n  _proto.scrollToRow = function scrollToRow(rowIndex, align) {\n    if (rowIndex === void 0) {\n      rowIndex = 0;\n    }\n\n    if (align === void 0) {\n      align = 'auto';\n    }\n\n    this.table && this.table.scrollToRow(rowIndex, align);\n    this.leftTable && this.leftTable.scrollToRow(rowIndex, align);\n    this.rightTable && this.rightTable.scrollToRow(rowIndex, align);\n  }\n  /**\n   * Set `expandedRowKeys` manually.\n   * This method is available only if `expandedRowKeys` is uncontrolled.\n   *\n   * @param {array} expandedRowKeys\n   */\n  ;\n\n  _proto.setExpandedRowKeys = function setExpandedRowKeys(expandedRowKeys) {\n    // if `expandedRowKeys` is controlled\n    if (this.props.expandedRowKeys !== undefined) return;\n    this.setState({\n      expandedRowKeys: cloneArray(expandedRowKeys)\n    });\n  };\n\n  _proto.renderExpandIcon = function renderExpandIcon(_ref) {\n    var rowData = _ref.rowData,\n        rowIndex = _ref.rowIndex,\n        depth = _ref.depth,\n        onExpand = _ref.onExpand;\n    var _this$props2 = this.props,\n        rowKey = _this$props2.rowKey,\n        expandColumnKey = _this$props2.expandColumnKey,\n        expandIconProps = _this$props2.expandIconProps;\n    if (!expandColumnKey) return null;\n    var expandable = rowIndex >= 0 && hasChildren(rowData);\n    var expanded = rowIndex >= 0 && this.getExpandedRowKeys().indexOf(rowData[rowKey]) >= 0;\n    var extraProps = callOrReturn(expandIconProps, {\n      rowData: rowData,\n      rowIndex: rowIndex,\n      depth: depth,\n      expandable: expandable,\n      expanded: expanded\n    });\n\n    var ExpandIcon = this._getComponent('ExpandIcon');\n\n    return React.createElement(ExpandIcon, _extends({\n      depth: depth,\n      expandable: expandable,\n      expanded: expanded\n    }, extraProps, {\n      onExpand: onExpand\n    }));\n  };\n\n  _proto.renderRow = function renderRow(_ref2) {\n    var _cn;\n\n    var isScrolling = _ref2.isScrolling,\n        columns = _ref2.columns,\n        rowData = _ref2.rowData,\n        rowIndex = _ref2.rowIndex,\n        style = _ref2.style;\n    var _this$props3 = this.props,\n        rowClassName = _this$props3.rowClassName,\n        rowRenderer = _this$props3.rowRenderer,\n        rowEventHandlers = _this$props3.rowEventHandlers,\n        expandColumnKey = _this$props3.expandColumnKey,\n        estimatedRowHeight = _this$props3.estimatedRowHeight;\n    var rowClass = callOrReturn(rowClassName, {\n      columns: columns,\n      rowData: rowData,\n      rowIndex: rowIndex\n    });\n    var extraProps = callOrReturn(this.props.rowProps, {\n      columns: columns,\n      rowData: rowData,\n      rowIndex: rowIndex\n    });\n    var rowKey = rowData[this.props.rowKey];\n    var depth = this._depthMap[rowKey] || 0;\n    var className = cn(this._prefixClass('row'), rowClass, (_cn = {}, _cn[this._prefixClass(\"row--depth-\" + depth)] = !!expandColumnKey && rowIndex >= 0, _cn[this._prefixClass('row--expanded')] = !!expandColumnKey && this.getExpandedRowKeys().indexOf(rowKey) >= 0, _cn[this._prefixClass('row--hovered')] = !isScrolling && rowKey === this.state.hoveredRowKey, _cn[this._prefixClass('row--frozen')] = depth === 0 && rowIndex < 0, _cn[this._prefixClass('row--customized')] = rowRenderer, _cn));\n    var hasFrozenColumns = this.columnManager.hasFrozenColumns();\n\n    var rowProps = _objectSpread({}, extraProps, {\n      role: 'row',\n      key: \"row-\" + rowKey,\n      isScrolling: isScrolling,\n      className: className,\n      style: style,\n      columns: columns,\n      rowIndex: rowIndex,\n      rowData: rowData,\n      rowKey: rowKey,\n      expandColumnKey: expandColumnKey,\n      depth: depth,\n      rowEventHandlers: rowEventHandlers,\n      rowRenderer: rowRenderer,\n      // for frozen rows we use fixed rowHeight\n      estimatedRowHeight: rowIndex >= 0 ? estimatedRowHeight : undefined,\n      getIsResetting: this._getIsResetting,\n      cellRenderer: this.renderRowCell,\n      expandIconRenderer: this.renderExpandIcon,\n      onRowExpand: this._handleRowExpand,\n      // for fixed table, we need to sync the hover state across the inner tables\n      onRowHover: hasFrozenColumns ? this._handleRowHover : null,\n      onRowHeightChange: hasFrozenColumns ? this._handleFrozenRowHeightChange : this._handleRowHeightChange\n    });\n\n    return React.createElement(TableRow, rowProps);\n  };\n\n  _proto.renderRowCell = function renderRowCell(_ref3) {\n    var _cn2;\n\n    var isScrolling = _ref3.isScrolling,\n        columns = _ref3.columns,\n        column = _ref3.column,\n        columnIndex = _ref3.columnIndex,\n        rowData = _ref3.rowData,\n        rowIndex = _ref3.rowIndex,\n        expandIcon = _ref3.expandIcon;\n\n    if (column[ColumnManager.PlaceholderKey]) {\n      return React.createElement(\"div\", {\n        key: \"row-\" + rowData[this.props.rowKey] + \"-cell-\" + column.key + \"-placeholder\",\n        className: this._prefixClass('row-cell-placeholder'),\n        style: this.columnManager.getColumnStyle(column.key)\n      });\n    }\n\n    var className = column.className,\n        dataKey = column.dataKey,\n        dataGetter = column.dataGetter,\n        cellRenderer = column.cellRenderer;\n\n    var TableCell = this._getComponent('TableCell');\n\n    var cellData = dataGetter ? dataGetter({\n      columns: columns,\n      column: column,\n      columnIndex: columnIndex,\n      rowData: rowData,\n      rowIndex: rowIndex\n    }) : getValue(rowData, dataKey);\n    var cellProps = {\n      isScrolling: isScrolling,\n      cellData: cellData,\n      columns: columns,\n      column: column,\n      columnIndex: columnIndex,\n      rowData: rowData,\n      rowIndex: rowIndex,\n      container: this\n    };\n    var cell = renderElement(cellRenderer || React.createElement(TableCell, {\n      className: this._prefixClass('row-cell-text')\n    }), cellProps);\n    var cellCls = callOrReturn(className, {\n      cellData: cellData,\n      columns: columns,\n      column: column,\n      columnIndex: columnIndex,\n      rowData: rowData,\n      rowIndex: rowIndex\n    });\n    var cls = cn(this._prefixClass('row-cell'), cellCls, (_cn2 = {}, _cn2[this._prefixClass('row-cell--align-center')] = column.align === Alignment.CENTER, _cn2[this._prefixClass('row-cell--align-right')] = column.align === Alignment.RIGHT, _cn2));\n    var extraProps = callOrReturn(this.props.cellProps, {\n      columns: columns,\n      column: column,\n      columnIndex: columnIndex,\n      rowData: rowData,\n      rowIndex: rowIndex\n    });\n\n    var _ref4 = extraProps || {},\n        tagName = _ref4.tagName,\n        rest = _objectWithoutPropertiesLoose(_ref4, [\"tagName\"]);\n\n    var Tag = tagName || 'div';\n    return React.createElement(Tag, _extends({\n      role: \"gridcell\",\n      key: \"row-\" + rowData[this.props.rowKey] + \"-cell-\" + column.key\n    }, rest, {\n      className: cls,\n      style: this.columnManager.getColumnStyle(column.key)\n    }), expandIcon, cell);\n  };\n\n  _proto.renderHeader = function renderHeader(_ref5) {\n    var _cn3;\n\n    var columns = _ref5.columns,\n        headerIndex = _ref5.headerIndex,\n        style = _ref5.style;\n    var _this$props4 = this.props,\n        headerClassName = _this$props4.headerClassName,\n        headerRenderer = _this$props4.headerRenderer;\n    var headerClass = callOrReturn(headerClassName, {\n      columns: columns,\n      headerIndex: headerIndex\n    });\n    var extraProps = callOrReturn(this.props.headerProps, {\n      columns: columns,\n      headerIndex: headerIndex\n    });\n    var className = cn(this._prefixClass('header-row'), headerClass, (_cn3 = {}, _cn3[this._prefixClass('header-row--resizing')] = !!this.state.resizingKey, _cn3[this._prefixClass('header-row--customized')] = headerRenderer, _cn3));\n\n    var headerProps = _objectSpread({}, extraProps, {\n      role: 'row',\n      key: \"header-\" + headerIndex,\n      className: className,\n      style: style,\n      columns: columns,\n      headerIndex: headerIndex,\n      headerRenderer: headerRenderer,\n      cellRenderer: this.renderHeaderCell,\n      expandColumnKey: this.props.expandColumnKey,\n      expandIcon: this._getComponent('ExpandIcon')\n    });\n\n    return React.createElement(TableHeaderRow, headerProps);\n  };\n\n  _proto.renderHeaderCell = function renderHeaderCell(_ref6) {\n    var _cn4, _cn5;\n\n    var columns = _ref6.columns,\n        column = _ref6.column,\n        columnIndex = _ref6.columnIndex,\n        headerIndex = _ref6.headerIndex,\n        expandIcon = _ref6.expandIcon;\n\n    if (column[ColumnManager.PlaceholderKey]) {\n      return React.createElement(\"div\", {\n        key: \"header-\" + headerIndex + \"-cell-\" + column.key + \"-placeholder\",\n        className: this._prefixClass('header-cell-placeholder'),\n        style: this.columnManager.getColumnStyle(column.key)\n      });\n    }\n\n    var headerClassName = column.headerClassName,\n        headerRenderer = column.headerRenderer;\n    var _this$props5 = this.props,\n        sortBy = _this$props5.sortBy,\n        sortState = _this$props5.sortState,\n        headerCellProps = _this$props5.headerCellProps;\n\n    var TableHeaderCell = this._getComponent('TableHeaderCell');\n\n    var SortIndicator = this._getComponent('SortIndicator');\n\n    var cellProps = {\n      columns: columns,\n      column: column,\n      columnIndex: columnIndex,\n      headerIndex: headerIndex,\n      container: this\n    };\n    var cell = renderElement(headerRenderer || React.createElement(TableHeaderCell, {\n      className: this._prefixClass('header-cell-text')\n    }), cellProps);\n    var sorting, sortOrder;\n\n    if (sortState) {\n      var order = sortState[column.key];\n      sorting = order === SortOrder.ASC || order === SortOrder.DESC;\n      sortOrder = sorting ? order : SortOrder.ASC;\n    } else {\n      sorting = column.key === sortBy.key;\n      sortOrder = sorting ? sortBy.order : SortOrder.ASC;\n    }\n\n    var cellCls = callOrReturn(headerClassName, {\n      columns: columns,\n      column: column,\n      columnIndex: columnIndex,\n      headerIndex: headerIndex\n    });\n    var cls = cn(this._prefixClass('header-cell'), cellCls, (_cn4 = {}, _cn4[this._prefixClass('header-cell--align-center')] = column.align === Alignment.CENTER, _cn4[this._prefixClass('header-cell--align-right')] = column.align === Alignment.RIGHT, _cn4[this._prefixClass('header-cell--sortable')] = column.sortable, _cn4[this._prefixClass('header-cell--sorting')] = sorting, _cn4[this._prefixClass('header-cell--resizing')] = column.key === this.state.resizingKey, _cn4));\n    var extraProps = callOrReturn(headerCellProps, {\n      columns: columns,\n      column: column,\n      columnIndex: columnIndex,\n      headerIndex: headerIndex\n    });\n\n    var _ref7 = extraProps || {},\n        tagName = _ref7.tagName,\n        rest = _objectWithoutPropertiesLoose(_ref7, [\"tagName\"]);\n\n    var Tag = tagName || 'div';\n    return React.createElement(Tag, _extends({\n      role: \"gridcell\",\n      key: \"header-\" + headerIndex + \"-cell-\" + column.key,\n      onClick: column.sortable ? this._handleColumnSort : null\n    }, rest, {\n      className: cls,\n      style: this.columnManager.getColumnStyle(column.key),\n      \"data-key\": column.key\n    }), expandIcon, cell, column.sortable && React.createElement(SortIndicator, {\n      sortOrder: sortOrder,\n      className: cn(this._prefixClass('sort-indicator'), (_cn5 = {}, _cn5[this._prefixClass('sort-indicator--descending')] = sortOrder === SortOrder.DESC, _cn5))\n    }), column.resizable && React.createElement(ColumnResizer, {\n      className: this._prefixClass('column-resizer'),\n      column: column,\n      onResizeStart: this._handleColumnResizeStart,\n      onResizeStop: this._handleColumnResizeStop,\n      onResize: this._handleColumnResize\n    }));\n  };\n\n  _proto.renderMainTable = function renderMainTable() {\n    var _this$props6 = this.props,\n        width = _this$props6.width,\n        headerHeight = _this$props6.headerHeight,\n        rowHeight = _this$props6.rowHeight,\n        fixed = _this$props6.fixed,\n        estimatedRowHeight = _this$props6.estimatedRowHeight,\n        rest = _objectWithoutPropertiesLoose(_this$props6, [\"width\", \"headerHeight\", \"rowHeight\", \"fixed\", \"estimatedRowHeight\"]);\n\n    var height = this._getTableHeight();\n\n    var tableWidth = width - this._verticalScrollbarSize;\n\n    if (fixed) {\n      var columnsWidth = this.columnManager.getColumnsWidth(); // make sure `scrollLeft` is always integer to fix a sync bug when scrolling to end horizontally\n\n      tableWidth = Math.max(Math.round(columnsWidth), tableWidth);\n    }\n\n    return React.createElement(GridTable, _extends({}, rest, this.state, {\n      className: this._prefixClass('table-main'),\n      ref: this._setMainTableRef,\n      data: this._data,\n      columns: this.columnManager.getMainColumns(),\n      width: width,\n      height: height,\n      headerHeight: headerHeight,\n      rowHeight: rowHeight,\n      estimatedRowHeight: estimatedRowHeight,\n      getRowHeight: estimatedRowHeight ? this._getRowHeight : undefined,\n      headerWidth: tableWidth + (fixed ? this._verticalScrollbarSize : 0),\n      bodyWidth: tableWidth,\n      headerRenderer: this.renderHeader,\n      rowRenderer: this.renderRow,\n      onScroll: this._handleScroll,\n      onRowsRendered: this._handleRowsRendered\n    }));\n  };\n\n  _proto.renderLeftTable = function renderLeftTable() {\n    if (!this.columnManager.hasLeftFrozenColumns()) return null;\n\n    var _this$props7 = this.props,\n        width = _this$props7.width,\n        headerHeight = _this$props7.headerHeight,\n        rowHeight = _this$props7.rowHeight,\n        estimatedRowHeight = _this$props7.estimatedRowHeight,\n        rest = _objectWithoutPropertiesLoose(_this$props7, [\"width\", \"headerHeight\", \"rowHeight\", \"estimatedRowHeight\"]);\n\n    var containerHeight = this._getFrozenContainerHeight();\n\n    var offset = this._verticalScrollbarSize || 20;\n    var columnsWidth = this.columnManager.getLeftFrozenColumnsWidth();\n    return React.createElement(GridTable, _extends({}, rest, this.state, {\n      containerStyle: this._getLeftTableContainerStyle(columnsWidth, width, containerHeight),\n      className: this._prefixClass('table-frozen-left'),\n      ref: this._setLeftTableRef,\n      data: this._data,\n      columns: this.columnManager.getLeftFrozenColumns(),\n      initialScrollTop: this._scroll.scrollTop,\n      width: columnsWidth + offset,\n      height: containerHeight,\n      headerHeight: headerHeight,\n      rowHeight: rowHeight,\n      estimatedRowHeight: estimatedRowHeight,\n      getRowHeight: estimatedRowHeight ? this._getRowHeight : undefined,\n      headerWidth: columnsWidth + offset,\n      bodyWidth: columnsWidth + offset,\n      headerRenderer: this.renderHeader,\n      rowRenderer: this.renderRow,\n      onScroll: this._handleVerticalScroll,\n      onRowsRendered: noop\n    }));\n  };\n\n  _proto.renderRightTable = function renderRightTable() {\n    if (!this.columnManager.hasRightFrozenColumns()) return null;\n\n    var _this$props8 = this.props,\n        width = _this$props8.width,\n        headerHeight = _this$props8.headerHeight,\n        rowHeight = _this$props8.rowHeight,\n        estimatedRowHeight = _this$props8.estimatedRowHeight,\n        rest = _objectWithoutPropertiesLoose(_this$props8, [\"width\", \"headerHeight\", \"rowHeight\", \"estimatedRowHeight\"]);\n\n    var containerHeight = this._getFrozenContainerHeight();\n\n    var columnsWidth = this.columnManager.getRightFrozenColumnsWidth();\n    var scrollbarWidth = this._verticalScrollbarSize;\n    return React.createElement(GridTable, _extends({}, rest, this.state, {\n      containerStyle: this._getLeftTableContainerStyle(columnsWidth + scrollbarWidth, width, containerHeight),\n      className: this._prefixClass('table-frozen-right'),\n      ref: this._setRightTableRef,\n      data: this._data,\n      columns: this.columnManager.getRightFrozenColumns(),\n      initialScrollTop: this._scroll.scrollTop,\n      width: columnsWidth + scrollbarWidth,\n      height: containerHeight,\n      headerHeight: headerHeight,\n      rowHeight: rowHeight,\n      estimatedRowHeight: estimatedRowHeight,\n      getRowHeight: estimatedRowHeight ? this._getRowHeight : undefined,\n      headerWidth: columnsWidth + scrollbarWidth,\n      bodyWidth: columnsWidth,\n      headerRenderer: this.renderHeader,\n      rowRenderer: this.renderRow,\n      onScroll: this._handleVerticalScroll,\n      onRowsRendered: noop\n    }));\n  };\n\n  _proto.renderResizingLine = function renderResizingLine() {\n    var _this$props9 = this.props,\n        width = _this$props9.width,\n        fixed = _this$props9.fixed;\n    var resizingKey = this.state.resizingKey;\n    if (!fixed || !resizingKey) return null;\n    var columns = this.columnManager.getMainColumns();\n    var idx = columns.findIndex(function (column) {\n      return column.key === resizingKey;\n    });\n    var column = columns[idx];\n    var columnWidth = column.width,\n        frozen = column.frozen;\n    var leftWidth = this.columnManager.recomputeColumnsWidth(columns.slice(0, idx));\n    var left = leftWidth + columnWidth;\n\n    if (!frozen) {\n      left -= this._scroll.scrollLeft;\n    } else if (frozen === FrozenDirection.RIGHT) {\n      var rightWidth = this.columnManager.recomputeColumnsWidth(columns.slice(idx + 1));\n\n      if (rightWidth + columnWidth > width - this._verticalScrollbarSize) {\n        left = columnWidth;\n      } else {\n        left = width - this._verticalScrollbarSize - rightWidth;\n      }\n    }\n\n    var style = {\n      left: left,\n      height: this._getTableHeight() - this._horizontalScrollbarSize\n    };\n    return React.createElement(\"div\", {\n      className: this._prefixClass('resizing-line'),\n      style: style\n    });\n  };\n\n  _proto.renderFooter = function renderFooter() {\n    var _this$props10 = this.props,\n        footerHeight = _this$props10.footerHeight,\n        footerRenderer = _this$props10.footerRenderer;\n    if (footerHeight === 0) return null;\n    return React.createElement(\"div\", {\n      className: this._prefixClass('footer'),\n      style: {\n        height: footerHeight\n      }\n    }, renderElement(footerRenderer));\n  };\n\n  _proto.renderEmptyLayer = function renderEmptyLayer() {\n    var _this$props11 = this.props,\n        data = _this$props11.data,\n        frozenData = _this$props11.frozenData,\n        footerHeight = _this$props11.footerHeight,\n        emptyRenderer = _this$props11.emptyRenderer;\n    if (data && data.length || frozenData && frozenData.length) return null;\n\n    var headerHeight = this._getHeaderHeight();\n\n    return React.createElement(\"div\", {\n      className: this._prefixClass('empty-layer'),\n      style: {\n        top: headerHeight,\n        bottom: footerHeight\n      }\n    }, renderElement(emptyRenderer));\n  };\n\n  _proto.renderOverlay = function renderOverlay() {\n    var overlayRenderer = this.props.overlayRenderer;\n    return React.createElement(\"div\", {\n      className: this._prefixClass('overlay')\n    }, !!overlayRenderer && renderElement(overlayRenderer));\n  };\n\n  _proto.render = function render() {\n    var _cn6;\n\n    var _this$props12 = this.props,\n        columns = _this$props12.columns,\n        children = _this$props12.children,\n        width = _this$props12.width,\n        fixed = _this$props12.fixed,\n        data = _this$props12.data,\n        frozenData = _this$props12.frozenData,\n        expandColumnKey = _this$props12.expandColumnKey,\n        disabled = _this$props12.disabled,\n        className = _this$props12.className,\n        style = _this$props12.style,\n        footerHeight = _this$props12.footerHeight,\n        classPrefix = _this$props12.classPrefix,\n        estimatedRowHeight = _this$props12.estimatedRowHeight;\n\n    this._resetColumnManager(getColumns(columns, children), fixed);\n\n    var _data = expandColumnKey ? this._flattenOnKeys(data, this.getExpandedRowKeys(), this.props.rowKey) : data;\n\n    if (this._data !== _data) {\n      this.resetAfterRowIndex(0, false);\n      this._data = _data;\n    } // should be after `this._data` assigned\n\n\n    this._calcScrollbarSizes();\n\n    this._totalRowsHeight = this.getTotalRowsHeight();\n\n    var containerStyle = _objectSpread({}, style, {\n      width: width,\n      height: this._getTableHeight() + footerHeight,\n      position: 'relative'\n    });\n\n    var cls = cn(classPrefix, className, (_cn6 = {}, _cn6[classPrefix + \"--fixed\"] = fixed, _cn6[classPrefix + \"--expandable\"] = !!expandColumnKey, _cn6[classPrefix + \"--empty\"] = data.length === 0, _cn6[classPrefix + \"--has-frozen-rows\"] = frozenData.length > 0, _cn6[classPrefix + \"--has-frozen-columns\"] = this.columnManager.hasFrozenColumns(), _cn6[classPrefix + \"--disabled\"] = disabled, _cn6[classPrefix + \"--dynamic\"] = estimatedRowHeight > 0, _cn6));\n    return React.createElement(\"div\", {\n      ref: this._setContainerRef,\n      className: cls,\n      style: containerStyle\n    }, this.renderFooter(), this.renderMainTable(), this.renderLeftTable(), this.renderRightTable(), this.renderResizingLine(), this.renderEmptyLayer(), this.renderOverlay());\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    var scrollbarSize = this.props.getScrollbarSize();\n\n    if (scrollbarSize > 0) {\n      this.setState({\n        scrollbarSize: scrollbarSize\n      });\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var _this$props13 = this.props,\n        data = _this$props13.data,\n        height = _this$props13.height,\n        maxHeight = _this$props13.maxHeight,\n        estimatedRowHeight = _this$props13.estimatedRowHeight;\n\n    if (data !== prevProps.data) {\n      this._lastScannedRowIndex = -1;\n      this._hasDataChangedSinceEndReached = true;\n    }\n\n    if (maxHeight !== prevProps.maxHeight || height !== prevProps.height) {\n      this._maybeCallOnEndReached();\n    }\n\n    this._maybeScrollbarPresenceChange();\n\n    if (estimatedRowHeight) {\n      if (this.getTotalRowsHeight() !== this._totalRowsHeight) {\n        this.forceUpdate();\n      }\n    }\n  };\n\n  _proto._prefixClass = function _prefixClass(className) {\n    return this.props.classPrefix + \"__\" + className;\n  };\n\n  _proto._setContainerRef = function _setContainerRef(ref) {\n    this.tableNode = ref;\n  };\n\n  _proto._setMainTableRef = function _setMainTableRef(ref) {\n    this.table = ref;\n  };\n\n  _proto._setLeftTableRef = function _setLeftTableRef(ref) {\n    this.leftTable = ref;\n  };\n\n  _proto._setRightTableRef = function _setRightTableRef(ref) {\n    this.rightTable = ref;\n  };\n\n  _proto._getComponent = function _getComponent(name) {\n    if (this.props.components && this.props.components[name]) return this.props.components[name];\n    return DEFAULT_COMPONENTS[name];\n  } // for dynamic row height\n  ;\n\n  _proto._getRowHeight = function _getRowHeight(rowIndex) {\n    var _this$props14 = this.props,\n        estimatedRowHeight = _this$props14.estimatedRowHeight,\n        rowKey = _this$props14.rowKey;\n    return this._rowHeightMap[this._data[rowIndex][rowKey]] || estimatedRowHeight;\n  };\n\n  _proto._getIsResetting = function _getIsResetting() {\n    return this._isResetting;\n  };\n\n  _proto._getHeaderHeight = function _getHeaderHeight() {\n    var headerHeight = this.props.headerHeight;\n\n    if (Array.isArray(headerHeight)) {\n      return headerHeight.reduce(function (sum, height) {\n        return sum + height;\n      }, 0);\n    }\n\n    return headerHeight;\n  };\n\n  _proto._getFrozenRowsHeight = function _getFrozenRowsHeight() {\n    var _this$props15 = this.props,\n        frozenData = _this$props15.frozenData,\n        rowHeight = _this$props15.rowHeight;\n    return frozenData.length * rowHeight;\n  };\n\n  _proto._getTableHeight = function _getTableHeight() {\n    var _this$props16 = this.props,\n        height = _this$props16.height,\n        maxHeight = _this$props16.maxHeight,\n        footerHeight = _this$props16.footerHeight;\n    var tableHeight = height - footerHeight;\n\n    if (maxHeight > 0) {\n      var frozenRowsHeight = this._getFrozenRowsHeight();\n\n      var totalRowsHeight = this.getTotalRowsHeight();\n\n      var headerHeight = this._getHeaderHeight();\n\n      var totalHeight = headerHeight + frozenRowsHeight + totalRowsHeight + this._horizontalScrollbarSize;\n      tableHeight = Math.min(totalHeight, maxHeight - footerHeight);\n    }\n\n    return tableHeight;\n  };\n\n  _proto._getBodyHeight = function _getBodyHeight() {\n    return this._getTableHeight() - this._getHeaderHeight() - this._getFrozenRowsHeight();\n  };\n\n  _proto._getFrozenContainerHeight = function _getFrozenContainerHeight() {\n    var maxHeight = this.props.maxHeight;\n    var tableHeight = this._getTableHeight() - (this._data.length > 0 ? this._horizontalScrollbarSize : 0); // in auto height mode tableHeight = totalHeight\n\n    if (maxHeight > 0) return tableHeight;\n\n    var totalHeight = this.getTotalRowsHeight() + this._getHeaderHeight() + this._getFrozenRowsHeight();\n\n    return Math.min(tableHeight, totalHeight);\n  };\n\n  _proto._calcScrollbarSizes = function _calcScrollbarSizes() {\n    var _this$props17 = this.props,\n        fixed = _this$props17.fixed,\n        width = _this$props17.width;\n    var scrollbarSize = this.state.scrollbarSize;\n    var totalRowsHeight = this.getTotalRowsHeight();\n    var totalColumnsWidth = this.getTotalColumnsWidth();\n    var prevHorizontalScrollbarSize = this._horizontalScrollbarSize;\n    var prevVerticalScrollbarSize = this._verticalScrollbarSize;\n\n    if (scrollbarSize === 0) {\n      this._horizontalScrollbarSize = 0;\n      this._verticalScrollbarSize = 0;\n    } else {\n      // we have to set `this._horizontalScrollbarSize` before calling `this._getBodyHeight`\n      if (!fixed || totalColumnsWidth <= width - scrollbarSize) {\n        this._horizontalScrollbarSize = 0;\n        this._verticalScrollbarSize = totalRowsHeight > this._getBodyHeight() ? scrollbarSize : 0;\n      } else {\n        if (totalColumnsWidth > width) {\n          this._horizontalScrollbarSize = scrollbarSize;\n          this._verticalScrollbarSize = totalRowsHeight > this._getBodyHeight() - this._horizontalScrollbarSize ? scrollbarSize : 0;\n        } else {\n          this._horizontalScrollbarSize = 0;\n          this._verticalScrollbarSize = 0;\n\n          if (totalRowsHeight > this._getBodyHeight()) {\n            this._horizontalScrollbarSize = scrollbarSize;\n            this._verticalScrollbarSize = scrollbarSize;\n          }\n        }\n      }\n    }\n\n    if (prevHorizontalScrollbarSize !== this._horizontalScrollbarSize || prevVerticalScrollbarSize !== this._verticalScrollbarSize) {\n      this._scrollbarPresenceChanged = true;\n    }\n  };\n\n  _proto._maybeScrollbarPresenceChange = function _maybeScrollbarPresenceChange() {\n    if (this._scrollbarPresenceChanged) {\n      var onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;\n      this._scrollbarPresenceChanged = false;\n      onScrollbarPresenceChange({\n        size: this.state.scrollbarSize,\n        horizontal: this._horizontalScrollbarSize > 0,\n        vertical: this._verticalScrollbarSize > 0\n      });\n    }\n  };\n\n  _proto._maybeCallOnEndReached = function _maybeCallOnEndReached() {\n    var _this$props18 = this.props,\n        onEndReached = _this$props18.onEndReached,\n        onEndReachedThreshold = _this$props18.onEndReachedThreshold;\n    var scrollTop = this._scroll.scrollTop;\n    var scrollHeight = this.getTotalRowsHeight();\n\n    var clientHeight = this._getBodyHeight();\n\n    if (!onEndReached || !clientHeight || !scrollHeight) return;\n    var distanceFromEnd = scrollHeight - scrollTop - clientHeight + this._horizontalScrollbarSize;\n\n    if (this._lastScannedRowIndex >= 0 && distanceFromEnd <= onEndReachedThreshold && (this._hasDataChangedSinceEndReached || scrollHeight !== this._scrollHeight)) {\n      this._hasDataChangedSinceEndReached = false;\n      this._scrollHeight = scrollHeight;\n      onEndReached({\n        distanceFromEnd: distanceFromEnd\n      });\n    }\n  };\n\n  _proto._handleScroll = function _handleScroll(args) {\n    var lastScrollTop = this._scroll.scrollTop;\n    this.scrollToPosition(args);\n    this.props.onScroll(args);\n    if (args.scrollTop > lastScrollTop) this._maybeCallOnEndReached();\n  };\n\n  _proto._handleVerticalScroll = function _handleVerticalScroll(_ref8) {\n    var scrollTop = _ref8.scrollTop;\n    var lastScrollTop = this._scroll.scrollTop;\n    if (scrollTop !== lastScrollTop) this.scrollToTop(scrollTop);\n    if (scrollTop > lastScrollTop) this._maybeCallOnEndReached();\n  };\n\n  _proto._handleRowsRendered = function _handleRowsRendered(args) {\n    this.props.onRowsRendered(args);\n\n    if (args.overscanStopIndex > this._lastScannedRowIndex) {\n      this._lastScannedRowIndex = args.overscanStopIndex;\n\n      this._maybeCallOnEndReached();\n    }\n  };\n\n  _proto._handleRowHover = function _handleRowHover(_ref9) {\n    var hovered = _ref9.hovered,\n        rowKey = _ref9.rowKey;\n    this.setState({\n      hoveredRowKey: hovered ? rowKey : null\n    });\n  };\n\n  _proto._handleRowExpand = function _handleRowExpand(_ref10) {\n    var expanded = _ref10.expanded,\n        rowData = _ref10.rowData,\n        rowIndex = _ref10.rowIndex,\n        rowKey = _ref10.rowKey;\n    var expandedRowKeys = cloneArray(this.getExpandedRowKeys());\n\n    if (expanded) {\n      if (!expandedRowKeys.indexOf(rowKey) >= 0) expandedRowKeys.push(rowKey);\n    } else {\n      var index = expandedRowKeys.indexOf(rowKey);\n\n      if (index > -1) {\n        expandedRowKeys.splice(index, 1);\n      }\n    } // if `expandedRowKeys` is uncontrolled, update internal state\n\n\n    if (this.props.expandedRowKeys === undefined) {\n      this.setState({\n        expandedRowKeys: expandedRowKeys\n      });\n    }\n\n    this.props.onRowExpand({\n      expanded: expanded,\n      rowData: rowData,\n      rowIndex: rowIndex,\n      rowKey: rowKey\n    });\n    this.props.onExpandedRowsChange(expandedRowKeys);\n  };\n\n  _proto._handleColumnResize = function _handleColumnResize(_ref11, width) {\n    var key = _ref11.key;\n    this.columnManager.setColumnWidth(key, width);\n    this.setState({\n      resizingWidth: width\n    });\n    var column = this.columnManager.getColumn(key);\n    this.props.onColumnResize({\n      column: column,\n      width: width\n    });\n  };\n\n  _proto._handleColumnResizeStart = function _handleColumnResizeStart(_ref12) {\n    var key = _ref12.key;\n    this.setState({\n      resizingKey: key\n    });\n  };\n\n  _proto._handleColumnResizeStop = function _handleColumnResizeStop() {\n    var _this$state = this.state,\n        resizingKey = _this$state.resizingKey,\n        resizingWidth = _this$state.resizingWidth;\n    this.setState({\n      resizingKey: null,\n      resizingWidth: 0\n    });\n    if (!resizingKey || !resizingWidth) return;\n    var column = this.columnManager.getColumn(resizingKey);\n    this.props.onColumnResizeEnd({\n      column: column,\n      width: resizingWidth\n    });\n  };\n\n  _proto._handleColumnSort = function _handleColumnSort(event) {\n    var key = event.currentTarget.dataset.key;\n    var _this$props19 = this.props,\n        sortBy = _this$props19.sortBy,\n        sortState = _this$props19.sortState,\n        onColumnSort = _this$props19.onColumnSort;\n    var order = SortOrder.ASC;\n\n    if (sortState) {\n      order = sortState[key] === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n    } else if (key === sortBy.key) {\n      order = sortBy.order === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n    }\n\n    var column = this.columnManager.getColumn(key);\n    onColumnSort({\n      column: column,\n      key: key,\n      order: order\n    });\n  };\n\n  _proto._handleFrozenRowHeightChange = function _handleFrozenRowHeightChange(rowKey, size, rowIndex, frozen) {\n    if (!frozen) {\n      this._mainRowHeightMap[rowKey] = size;\n    } else if (frozen === FrozenDirection.RIGHT) {\n      this._rightRowHeightMap[rowKey] = size;\n    } else {\n      this._leftRowHeightMap[rowKey] = size;\n    }\n\n    var height = Math.max(this._mainRowHeightMap[rowKey] || 0, this._leftRowHeightMap[rowKey] || 0, this._rightRowHeightMap[rowKey] || 0);\n\n    if (this._rowHeightMap[rowKey] !== height) {\n      this._handleRowHeightChange(rowKey, height, rowIndex);\n    }\n  };\n\n  _proto._handleRowHeightChange = function _handleRowHeightChange(rowKey, size, rowIndex) {\n    if (this._resetIndex === null) this._resetIndex = rowIndex;else if (this._resetIndex > rowIndex) this._resetIndex = rowIndex;\n    this._rowHeightMapBuffer[rowKey] = size;\n\n    this._updateRowHeights();\n  };\n\n  return BaseTable;\n}(React.PureComponent);\n\nBaseTable.Column = Column;\nBaseTable.PlaceholderKey = ColumnManager.PlaceholderKey;\nBaseTable.defaultProps = {\n  classPrefix: 'BaseTable',\n  rowKey: 'id',\n  data: [],\n  frozenData: [],\n  fixed: false,\n  headerHeight: 50,\n  rowHeight: 50,\n  footerHeight: 0,\n  defaultExpandedRowKeys: [],\n  sortBy: {},\n  useIsScrolling: false,\n  overscanRowCount: 1,\n  onEndReachedThreshold: 500,\n  getScrollbarSize: defaultGetScrollbarSize,\n  ignoreFunctionInColumnCompare: true,\n  onScroll: noop,\n  onRowsRendered: noop,\n  onScrollbarPresenceChange: noop,\n  onRowExpand: noop,\n  onExpandedRowsChange: noop,\n  onColumnSort: noop,\n  onColumnResize: noop,\n  onColumnResizeEnd: noop\n};\nBaseTable.propTypes = {\n  /**\n   * Prefix for table's inner className\n   */\n  classPrefix: PropTypes.string,\n\n  /**\n   * Class name for the table\n   */\n  className: PropTypes.string,\n\n  /**\n   * Custom style for the table\n   */\n  style: PropTypes.object,\n\n  /**\n   * A collection of Column\n   */\n  children: PropTypes.node,\n\n  /**\n   * Columns for the table\n   */\n  columns: PropTypes.arrayOf(PropTypes.shape(Column.propTypes)),\n\n  /**\n   * The data for the table\n   */\n  data: PropTypes.array.isRequired,\n\n  /**\n   * The data be frozen to top, `rowIndex` is negative and started from `-1`\n   */\n  frozenData: PropTypes.array,\n\n  /**\n   * The key field of each data item\n   */\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n\n  /**\n   * The width of the table\n   */\n  width: PropTypes.number.isRequired,\n\n  /**\n   * The height of the table, will be ignored if `maxHeight` is set\n   */\n  height: PropTypes.number,\n\n  /**\n   * The max height of the table, the table's height will auto change when data changes,\n   * will turns to vertical scroll if reaches the max height\n   */\n  maxHeight: PropTypes.number,\n\n  /**\n   * The height of each table row, will be only used by frozen rows if `estimatedRowHeight` is set\n   */\n  rowHeight: PropTypes.number,\n\n  /**\n   * Estimated row height, the real height will be measure dynamically according to the content\n   */\n  estimatedRowHeight: PropTypes.number,\n\n  /**\n   * The height of the table header, set to 0 to hide the header, could be an array to render multi headers.\n   */\n  headerHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]).isRequired,\n\n  /**\n   * The height of the table footer\n   */\n  footerHeight: PropTypes.number,\n\n  /**\n   * Whether the width of the columns are fixed or flexible\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Whether the table is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Custom renderer on top of the table component\n   */\n  overlayRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n\n  /**\n   * Custom renderer when the length of data is 0\n   */\n  emptyRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n\n  /**\n   * Custom footer renderer, available only if `footerHeight` is larger then 0\n   */\n  footerRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n\n  /**\n   * Custom header renderer\n   * The renderer receives props `{ cells, columns, headerIndex }`\n   */\n  headerRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n\n  /**\n   * Custom row renderer\n   * The renderer receives props `{ isScrolling, cells, columns, rowData, rowIndex, depth }`\n   */\n  rowRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n\n  /**\n   * Class name for the table header, could be a callback to return the class name\n   * The callback is of the shape of `({ columns, headerIndex }) => string`\n   */\n  headerClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n  /**\n   * Class name for the table row, could be a callback to return the class name\n   * The callback is of the shape of `({ columns, rowData, rowIndex }) => string`\n   */\n  rowClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n  /**\n   * Extra props applied to header element\n   * The handler is of the shape of `({ columns, headerIndex }) object`\n   */\n  headerProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * Extra props applied to header cell element\n   * The handler is of the shape of `({ columns, column, columnIndex, headerIndex }) => object`\n   */\n  headerCellProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * Extra props applied to row element\n   * The handler is of the shape of `({ columns, rowData, rowIndex }) => object`\n   */\n  rowProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * Extra props applied to row cell element\n   * The handler is of the shape of `({ columns, column, columnIndex, rowData, rowIndex }) => object`\n   */\n  cellProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * Extra props applied to ExpandIcon component\n   * The handler is of the shape of `({ rowData, rowIndex, depth, expandable, expanded }) => object`\n   */\n  expandIconProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * The key for the expand column which render the expand icon if the data is a tree\n   */\n  expandColumnKey: PropTypes.string,\n\n  /**\n   * Default expanded row keys when initialize the table\n   */\n  defaultExpandedRowKeys: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n\n  /**\n   * Controlled expanded row keys\n   */\n  expandedRowKeys: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n\n  /**\n   * A callback function when expand or collapse a tree node\n   * The handler is of the shape of `({ expanded, rowData, rowIndex, rowKey }) => *`\n   */\n  onRowExpand: PropTypes.func,\n\n  /**\n   * A callback function when the expanded row keys changed\n   * The handler is of the shape of `(expandedRowKeys) => *`\n   */\n  onExpandedRowsChange: PropTypes.func,\n\n  /**\n   * The sort state for the table, will be ignored if `sortState` is set\n   */\n  sortBy: PropTypes.shape({\n    /**\n     * Sort key\n     */\n    key: PropTypes.string,\n\n    /**\n     * Sort order\n     */\n    order: PropTypes.oneOf([SortOrder.ASC, SortOrder.DESC])\n  }),\n\n  /**\n   * Multiple columns sort state for the table\n   *\n   * example:\n   * ```js\n   * {\n   *   'column-0': SortOrder.ASC,\n   *   'column-1': SortOrder.DESC,\n   * }\n   * ```\n   */\n  sortState: PropTypes.object,\n\n  /**\n   * A callback function for the header cell click event\n   * The handler is of the shape of `({ column, key, order }) => *`\n   */\n  onColumnSort: PropTypes.func,\n\n  /**\n   * A callback function when resizing the column width\n   * The handler is of the shape of `({ column, width }) => *`\n   */\n  onColumnResize: PropTypes.func,\n\n  /**\n   * A callback function when resizing the column width ends\n   * The handler is of the shape of `({ column, width }) => *`\n   */\n  onColumnResizeEnd: PropTypes.func,\n\n  /**\n   * Adds an additional isScrolling parameter to the row renderer.\n   * This parameter can be used to show a placeholder row while scrolling.\n   */\n  useIsScrolling: PropTypes.bool,\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list\n   */\n  overscanRowCount: PropTypes.number,\n\n  /**\n   * Custom scrollbar size measurement\n   */\n  getScrollbarSize: PropTypes.func,\n\n  /**\n   * A callback function when scrolling the table\n   * The handler is of the shape of `({ scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested }) => *`\n   *\n   * `scrollLeft` and `scrollTop` are numbers.\n   *\n   * `horizontalDirection` and `verticalDirection` are either `forward` or `backward`.\n   *\n   * `scrollUpdateWasRequested` is a boolean. This value is true if the scroll was caused by `scrollTo*`,\n   * and false if it was the result of a user interaction in the browser.\n   */\n  onScroll: PropTypes.func,\n\n  /**\n   * A callback function when scrolling the table within `onEndReachedThreshold` of the bottom\n   * The handler is of the shape of `({ distanceFromEnd }) => *`\n   */\n  onEndReached: PropTypes.func,\n\n  /**\n   * Threshold in pixels for calling `onEndReached`.\n   */\n  onEndReachedThreshold: PropTypes.number,\n\n  /**\n   * A callback function with information about the slice of rows that were just rendered\n   * The handler is of the shape of `({ overscanStartIndex, overscanStopIndex, startIndex， stopIndex }) => *`\n   */\n  onRowsRendered: PropTypes.func,\n\n  /**\n   * A callback function when the scrollbar presence state changed\n   * The handler is of the shape of `({ size, vertical, horizontal }) => *`\n   */\n  onScrollbarPresenceChange: PropTypes.func,\n\n  /**\n   * A object for the row event handlers\n   * Each of the keys is row event name, like `onClick`, `onDoubleClick` and etc.\n   * Each of the handlers is of the shape of `({ rowData, rowIndex, rowKey, event }) => *`\n   */\n  rowEventHandlers: PropTypes.object,\n\n  /**\n   * whether to ignore function properties while comparing column definition\n   */\n  ignoreFunctionInColumnCompare: PropTypes.bool,\n\n  /**\n   * A object for the custom components, like `ExpandIcon` and `SortIndicator`\n   */\n  components: PropTypes.shape({\n    TableCell: PropTypes.func,\n    TableHeaderCell: PropTypes.func,\n    ExpandIcon: PropTypes.func,\n    SortIndicator: PropTypes.func\n  })\n};\nexport default BaseTable;","map":{"version":3,"sources":["../src/BaseTable.js"],"names":["getScrollbarSize","getColumns","memoize","columns","normalizeColumns","getContainerStyle","width","maxWidth","height","overflow","DEFAULT_COMPONENTS","TableCell","TableHeaderCell","ExpandIcon","SortIndicator","RESIZE_THROTTLE_WAIT","EMPTY_ARRAY","BaseTable","React","PureComponent","children","defaultExpandedRowKeys","props","scrollbarSize","hoveredRowKey","resizingKey","resizingWidth","expandedRowKeys","cloneArray","throttle","flattenOnKeys","isObjectEqual","debounce","scrollLeft","scrollTop","getDOMNode","getColumnManager","getExpandedRowKeys","getExpandedState","expandedData","expandedDepthMap","_depthMap","getTotalRowsHeight","rowHeight","estimatedRowHeight","getTotalColumnsWidth","forceUpdateTable","resetAfterRowIndex","rowIndex","shouldForceUpdate","resetRowHeightCache","scrollToPosition","offset","scrollToTop","scrollToLeft","scrollToRow","align","setExpandedRowKeys","renderExpandIcon","rowData","depth","onExpand","rowKey","expandColumnKey","expandIconProps","expandable","hasChildren","expanded","extraProps","callOrReturn","renderRow","isScrolling","style","rowClassName","rowRenderer","rowEventHandlers","rowClass","className","cn","hasFrozenColumns","rowProps","role","key","getIsResetting","cellRenderer","expandIconRenderer","onRowExpand","onRowHover","onRowHeightChange","_handleRowHeightChange","renderRowCell","column","columnIndex","expandIcon","ColumnManager","dataKey","dataGetter","cellData","getValue","cellProps","container","cell","renderElement","cellCls","cls","Alignment","tagName","rest","Tag","renderHeader","headerIndex","headerClassName","headerRenderer","headerClass","headerProps","renderHeaderCell","sortBy","sortState","headerCellProps","order","sorting","SortOrder","sortOrder","_handleColumnResize","renderMainTable","headerHeight","fixed","tableWidth","columnsWidth","Math","_handleRowsRendered","renderLeftTable","containerHeight","noop","renderRightTable","scrollbarWidth","renderResizingLine","idx","columnWidth","frozen","leftWidth","left","FrozenDirection","rightWidth","_horizontalScrollbarSize","renderFooter","footerHeight","footerRenderer","renderEmptyLayer","data","frozenData","emptyRenderer","top","bottom","renderOverlay","overlayRenderer","render","disabled","classPrefix","_data","containerStyle","position","componentDidMount","componentDidUpdate","maxHeight","prevProps","_prefixClass","_setContainerRef","_setMainTableRef","_setLeftTableRef","_setRightTableRef","_getComponent","_getRowHeight","_getIsResetting","_getHeaderHeight","Array","sum","_getFrozenRowsHeight","_getTableHeight","tableHeight","frozenRowsHeight","totalRowsHeight","totalHeight","_getBodyHeight","_getFrozenContainerHeight","_calcScrollbarSizes","totalColumnsWidth","prevHorizontalScrollbarSize","prevVerticalScrollbarSize","_maybeScrollbarPresenceChange","onScrollbarPresenceChange","size","horizontal","vertical","_maybeCallOnEndReached","onEndReached","onEndReachedThreshold","scrollHeight","clientHeight","distanceFromEnd","_handleScroll","lastScrollTop","args","_handleVerticalScroll","_handleRowHover","hovered","_handleRowExpand","index","_handleColumnResizeStart","_handleColumnResizeStop","_handleColumnSort","event","onColumnSort","_handleFrozenRowHeightChange","useIsScrolling","overscanRowCount","ignoreFunctionInColumnCompare","onScroll","onRowsRendered","onExpandedRowsChange","onColumnResize","onColumnResizeEnd","PropTypes","Column","components","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport memoize from 'memoize-one';\n\nimport GridTable from './GridTable';\nimport TableHeaderRow from './TableHeaderRow';\nimport TableRow from './TableRow';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableCell from './TableCell';\nimport Column, { Alignment, FrozenDirection } from './Column';\nimport SortOrder from './SortOrder';\nimport ExpandIcon from './ExpandIcon';\nimport SortIndicator from './SortIndicator';\nimport ColumnResizer from './ColumnResizer';\nimport ColumnManager from './ColumnManager';\n\nimport {\n  renderElement,\n  normalizeColumns,\n  getScrollbarSize as defaultGetScrollbarSize,\n  isObjectEqual,\n  callOrReturn,\n  hasChildren,\n  flattenOnKeys,\n  cloneArray,\n  getValue,\n  throttle,\n  debounce,\n  noop,\n} from './utils';\n\nconst getColumns = memoize((columns, children) => columns || normalizeColumns(children));\n\nconst getContainerStyle = (width, maxWidth, height) => ({\n  width,\n  maxWidth,\n  height,\n  overflow: 'hidden',\n});\n\nconst DEFAULT_COMPONENTS = {\n  TableCell,\n  TableHeaderCell,\n  ExpandIcon,\n  SortIndicator,\n};\n\nconst RESIZE_THROTTLE_WAIT = 50;\n\n// used for memoization\nconst EMPTY_ARRAY = [];\n\n/**\n * React table component\n */\nclass BaseTable extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    const { columns, children, defaultExpandedRowKeys } = props;\n    this.state = {\n      scrollbarSize: 0,\n      hoveredRowKey: null,\n      resizingKey: null,\n      resizingWidth: 0,\n      expandedRowKeys: cloneArray(defaultExpandedRowKeys),\n    };\n    this.columnManager = new ColumnManager(getColumns(columns, children), props.fixed);\n\n    this._setContainerRef = this._setContainerRef.bind(this);\n    this._setMainTableRef = this._setMainTableRef.bind(this);\n    this._setLeftTableRef = this._setLeftTableRef.bind(this);\n    this._setRightTableRef = this._setRightTableRef.bind(this);\n\n    this.renderExpandIcon = this.renderExpandIcon.bind(this);\n    this.renderRow = this.renderRow.bind(this);\n    this.renderRowCell = this.renderRowCell.bind(this);\n    this.renderHeader = this.renderHeader.bind(this);\n    this.renderHeaderCell = this.renderHeaderCell.bind(this);\n\n    this._handleScroll = this._handleScroll.bind(this);\n    this._handleVerticalScroll = this._handleVerticalScroll.bind(this);\n    this._handleRowsRendered = this._handleRowsRendered.bind(this);\n    this._handleRowHover = this._handleRowHover.bind(this);\n    this._handleRowExpand = this._handleRowExpand.bind(this);\n    this._handleColumnResize = throttle(this._handleColumnResize.bind(this), RESIZE_THROTTLE_WAIT);\n    this._handleColumnResizeStart = this._handleColumnResizeStart.bind(this);\n    this._handleColumnResizeStop = this._handleColumnResizeStop.bind(this);\n    this._handleColumnSort = this._handleColumnSort.bind(this);\n    this._handleFrozenRowHeightChange = this._handleFrozenRowHeightChange.bind(this);\n    this._handleRowHeightChange = this._handleRowHeightChange.bind(this);\n\n    this._getLeftTableContainerStyle = memoize(getContainerStyle);\n    this._getRightTableContainerStyle = memoize(getContainerStyle);\n    this._flattenOnKeys = memoize((tree, keys, dataKey) => {\n      this._depthMap = {};\n      return flattenOnKeys(tree, keys, this._depthMap, dataKey);\n    });\n    this._resetColumnManager = memoize(\n      (columns, fixed) => {\n        this.columnManager.reset(columns, fixed);\n\n        if (this.props.estimatedRowHeight && fixed) {\n          if (!this.columnManager.hasLeftFrozenColumns()) {\n            this._leftRowHeightMap = {};\n          }\n          if (!this.columnManager.hasRightFrozenColumns()) {\n            this._rightRowHeightMap = {};\n          }\n        }\n      },\n      (newArgs, lastArgs) => isObjectEqual(newArgs, lastArgs, this.props.ignoreFunctionInColumnCompare)\n    );\n\n    this._isResetting = false;\n    this._resetIndex = null;\n    this._rowHeightMap = {};\n    this._rowHeightMapBuffer = {};\n    this._mainRowHeightMap = {};\n    this._leftRowHeightMap = {};\n    this._rightRowHeightMap = {};\n    this._getRowHeight = this._getRowHeight.bind(this);\n    this._updateRowHeights = debounce(() => {\n      this._isResetting = true;\n      this._rowHeightMap = { ...this._rowHeightMap, ...this._rowHeightMapBuffer };\n      this.resetAfterRowIndex(this._resetIndex, false);\n      this._rowHeightMapBuffer = {};\n      this._resetIndex = null;\n      this.forceUpdateTable();\n      this.forceUpdate();\n      this._isResetting = false;\n    }, 0);\n\n    this._scroll = { scrollLeft: 0, scrollTop: 0 };\n    this._scrollHeight = 0;\n    this._lastScannedRowIndex = -1;\n    this._hasDataChangedSinceEndReached = true;\n\n    this._data = props.data;\n    this._depthMap = {};\n\n    this._horizontalScrollbarSize = 0;\n    this._verticalScrollbarSize = 0;\n    this._scrollbarPresenceChanged = false;\n  }\n\n  /**\n   * Get the DOM node of the table\n   */\n  getDOMNode() {\n    return this.tableNode;\n  }\n\n  /**\n   * Get the column manager\n   */\n  getColumnManager() {\n    return this.columnManager;\n  }\n\n  /**\n   * Get internal `expandedRowKeys` state\n   */\n  getExpandedRowKeys() {\n    const { expandedRowKeys } = this.props;\n    return expandedRowKeys !== undefined ? expandedRowKeys || EMPTY_ARRAY : this.state.expandedRowKeys;\n  }\n\n  /**\n   * Get the expanded state, fallback to normal state if not expandable.\n   */\n  getExpandedState() {\n    return {\n      expandedData: this._data,\n      expandedRowKeys: this.getExpandedRowKeys(),\n      expandedDepthMap: this._depthMap,\n    };\n  }\n\n  /**\n   * Get the total height of all rows, including expanded rows.\n   */\n  getTotalRowsHeight() {\n    const { rowHeight, estimatedRowHeight } = this.props;\n\n    if (estimatedRowHeight) {\n      return this.table ? this.table.getTotalRowsHeight() : this._data.length * estimatedRowHeight;\n    }\n    return this._data.length * rowHeight;\n  }\n\n  /**\n   * Get the total width of all columns.\n   */\n  getTotalColumnsWidth() {\n    return this.columnManager.getColumnsWidth();\n  }\n\n  /**\n   * Forcefully re-render the inner Grid component.\n   *\n   * Calling `forceUpdate` on `Table` may not re-render the inner Grid since it uses `shallowCompare` as a performance optimization.\n   * Use this method if you want to manually trigger a re-render.\n   * This may be appropriate if the underlying row data has changed but the row sizes themselves have not.\n   */\n  forceUpdateTable() {\n    this.table && this.table.forceUpdateTable();\n    this.leftTable && this.leftTable.forceUpdateTable();\n    this.rightTable && this.rightTable.forceUpdateTable();\n  }\n\n  /**\n   * Reset cached offsets for positioning after a specific rowIndex, should be used only in dynamic mode(estimatedRowHeight is provided)\n   *\n   * @param {number} rowIndex\n   * @param {boolean} shouldForceUpdate\n   */\n  resetAfterRowIndex(rowIndex = 0, shouldForceUpdate = true) {\n    if (!this.props.estimatedRowHeight) return;\n\n    this.table && this.table.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n    this.leftTable && this.leftTable.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n    this.rightTable && this.rightTable.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n  }\n\n  /**\n   * Reset row height cache, useful if `data` changed entirely, should be used only in dynamic mode(estimatedRowHeight is provided)\n   */\n  resetRowHeightCache() {\n    if (!this.props.estimatedRowHeight) return;\n\n    this._resetIndex = null;\n    this._rowHeightMapBuffer = {};\n    this._rowHeightMap = {};\n    this._mainRowHeightMap = {};\n    this._leftRowHeightMap = {};\n    this._rightRowHeightMap = {};\n  }\n\n  /**\n   * Scroll to the specified offset.\n   * Useful for animating position changes.\n   *\n   * @param {object} offset\n   */\n  scrollToPosition(offset) {\n    this._scroll = offset;\n\n    this.table && this.table.scrollToPosition(offset);\n    this.leftTable && this.leftTable.scrollToTop(offset.scrollTop);\n    this.rightTable && this.rightTable.scrollToTop(offset.scrollTop);\n  }\n\n  /**\n   * Scroll to the specified offset vertically.\n   *\n   * @param {number} scrollTop\n   */\n  scrollToTop(scrollTop) {\n    this._scroll.scrollTop = scrollTop;\n\n    this.table && this.table.scrollToPosition(this._scroll);\n    this.leftTable && this.leftTable.scrollToTop(scrollTop);\n    this.rightTable && this.rightTable.scrollToTop(scrollTop);\n  }\n\n  /**\n   * Scroll to the specified offset horizontally.\n   *\n   * @param {number} scrollLeft\n   */\n  scrollToLeft(scrollLeft) {\n    this._scroll.scrollLeft = scrollLeft;\n\n    this.table && this.table.scrollToPosition(this._scroll);\n  }\n\n  /**\n   * Scroll to the specified row.\n   * By default, the table will scroll as little as possible to ensure the row is visible.\n   * You can control the alignment of the row though by specifying an align property. Acceptable values are:\n   *\n   * - `auto` (default) - Scroll as little as possible to ensure the row is visible.\n   * - `smart` - Same as `auto` if it is less than one viewport away, or it's the same as`center`.\n   * - `center` - Center align the row within the table.\n   * - `end` - Align the row to the bottom side of the table.\n   * - `start` - Align the row to the top side of the table.\n   *\n   * @param {number} rowIndex\n   * @param {string} align\n   */\n  scrollToRow(rowIndex = 0, align = 'auto') {\n    this.table && this.table.scrollToRow(rowIndex, align);\n    this.leftTable && this.leftTable.scrollToRow(rowIndex, align);\n    this.rightTable && this.rightTable.scrollToRow(rowIndex, align);\n  }\n\n  /**\n   * Set `expandedRowKeys` manually.\n   * This method is available only if `expandedRowKeys` is uncontrolled.\n   *\n   * @param {array} expandedRowKeys\n   */\n  setExpandedRowKeys(expandedRowKeys) {\n    // if `expandedRowKeys` is controlled\n    if (this.props.expandedRowKeys !== undefined) return;\n\n    this.setState({\n      expandedRowKeys: cloneArray(expandedRowKeys),\n    });\n  }\n\n  renderExpandIcon({ rowData, rowIndex, depth, onExpand }) {\n    const { rowKey, expandColumnKey, expandIconProps } = this.props;\n    if (!expandColumnKey) return null;\n\n    const expandable = rowIndex >= 0 && hasChildren(rowData);\n    const expanded = rowIndex >= 0 && this.getExpandedRowKeys().indexOf(rowData[rowKey]) >= 0;\n    const extraProps = callOrReturn(expandIconProps, { rowData, rowIndex, depth, expandable, expanded });\n    const ExpandIcon = this._getComponent('ExpandIcon');\n\n    return <ExpandIcon depth={depth} expandable={expandable} expanded={expanded} {...extraProps} onExpand={onExpand} />;\n  }\n\n  renderRow({ isScrolling, columns, rowData, rowIndex, style }) {\n    const { rowClassName, rowRenderer, rowEventHandlers, expandColumnKey, estimatedRowHeight } = this.props;\n\n    const rowClass = callOrReturn(rowClassName, { columns, rowData, rowIndex });\n    const extraProps = callOrReturn(this.props.rowProps, { columns, rowData, rowIndex });\n    const rowKey = rowData[this.props.rowKey];\n    const depth = this._depthMap[rowKey] || 0;\n\n    const className = cn(this._prefixClass('row'), rowClass, {\n      [this._prefixClass(`row--depth-${depth}`)]: !!expandColumnKey && rowIndex >= 0,\n      [this._prefixClass('row--expanded')]: !!expandColumnKey && this.getExpandedRowKeys().indexOf(rowKey) >= 0,\n      [this._prefixClass('row--hovered')]: !isScrolling && rowKey === this.state.hoveredRowKey,\n      [this._prefixClass('row--frozen')]: depth === 0 && rowIndex < 0,\n      [this._prefixClass('row--customized')]: rowRenderer,\n    });\n\n    const hasFrozenColumns = this.columnManager.hasFrozenColumns();\n    const rowProps = {\n      ...extraProps,\n      role: 'row',\n      key: `row-${rowKey}`,\n      isScrolling,\n      className,\n      style,\n      columns,\n      rowIndex,\n      rowData,\n      rowKey,\n      expandColumnKey,\n      depth,\n      rowEventHandlers,\n      rowRenderer,\n      // for frozen rows we use fixed rowHeight\n      estimatedRowHeight: rowIndex >= 0 ? estimatedRowHeight : undefined,\n      getIsResetting: this._getIsResetting,\n      cellRenderer: this.renderRowCell,\n      expandIconRenderer: this.renderExpandIcon,\n      onRowExpand: this._handleRowExpand,\n      // for fixed table, we need to sync the hover state across the inner tables\n      onRowHover: hasFrozenColumns ? this._handleRowHover : null,\n      onRowHeightChange: hasFrozenColumns ? this._handleFrozenRowHeightChange : this._handleRowHeightChange,\n    };\n\n    return <TableRow {...rowProps} />;\n  }\n\n  renderRowCell({ isScrolling, columns, column, columnIndex, rowData, rowIndex, expandIcon }) {\n    if (column[ColumnManager.PlaceholderKey]) {\n      return (\n        <div\n          key={`row-${rowData[this.props.rowKey]}-cell-${column.key}-placeholder`}\n          className={this._prefixClass('row-cell-placeholder')}\n          style={this.columnManager.getColumnStyle(column.key)}\n        />\n      );\n    }\n\n    const { className, dataKey, dataGetter, cellRenderer } = column;\n    const TableCell = this._getComponent('TableCell');\n\n    const cellData = dataGetter\n      ? dataGetter({ columns, column, columnIndex, rowData, rowIndex })\n      : getValue(rowData, dataKey);\n    const cellProps = { isScrolling, cellData, columns, column, columnIndex, rowData, rowIndex, container: this };\n    const cell = renderElement(cellRenderer || <TableCell className={this._prefixClass('row-cell-text')} />, cellProps);\n\n    const cellCls = callOrReturn(className, { cellData, columns, column, columnIndex, rowData, rowIndex });\n    const cls = cn(this._prefixClass('row-cell'), cellCls, {\n      [this._prefixClass('row-cell--align-center')]: column.align === Alignment.CENTER,\n      [this._prefixClass('row-cell--align-right')]: column.align === Alignment.RIGHT,\n    });\n\n    const extraProps = callOrReturn(this.props.cellProps, { columns, column, columnIndex, rowData, rowIndex });\n    const { tagName, ...rest } = extraProps || {};\n    const Tag = tagName || 'div';\n    return (\n      <Tag\n        role=\"gridcell\"\n        key={`row-${rowData[this.props.rowKey]}-cell-${column.key}`}\n        {...rest}\n        className={cls}\n        style={this.columnManager.getColumnStyle(column.key)}\n      >\n        {expandIcon}\n        {cell}\n      </Tag>\n    );\n  }\n\n  renderHeader({ columns, headerIndex, style }) {\n    const { headerClassName, headerRenderer } = this.props;\n\n    const headerClass = callOrReturn(headerClassName, { columns, headerIndex });\n    const extraProps = callOrReturn(this.props.headerProps, { columns, headerIndex });\n\n    const className = cn(this._prefixClass('header-row'), headerClass, {\n      [this._prefixClass('header-row--resizing')]: !!this.state.resizingKey,\n      [this._prefixClass('header-row--customized')]: headerRenderer,\n    });\n\n    const headerProps = {\n      ...extraProps,\n      role: 'row',\n      key: `header-${headerIndex}`,\n      className,\n      style,\n      columns,\n      headerIndex,\n      headerRenderer,\n      cellRenderer: this.renderHeaderCell,\n      expandColumnKey: this.props.expandColumnKey,\n      expandIcon: this._getComponent('ExpandIcon'),\n    };\n\n    return <TableHeaderRow {...headerProps} />;\n  }\n\n  renderHeaderCell({ columns, column, columnIndex, headerIndex, expandIcon }) {\n    if (column[ColumnManager.PlaceholderKey]) {\n      return (\n        <div\n          key={`header-${headerIndex}-cell-${column.key}-placeholder`}\n          className={this._prefixClass('header-cell-placeholder')}\n          style={this.columnManager.getColumnStyle(column.key)}\n        />\n      );\n    }\n\n    const { headerClassName, headerRenderer } = column;\n    const { sortBy, sortState, headerCellProps } = this.props;\n    const TableHeaderCell = this._getComponent('TableHeaderCell');\n    const SortIndicator = this._getComponent('SortIndicator');\n\n    const cellProps = { columns, column, columnIndex, headerIndex, container: this };\n    const cell = renderElement(\n      headerRenderer || <TableHeaderCell className={this._prefixClass('header-cell-text')} />,\n      cellProps\n    );\n\n    let sorting, sortOrder;\n\n    if (sortState) {\n      const order = sortState[column.key];\n      sorting = order === SortOrder.ASC || order === SortOrder.DESC;\n      sortOrder = sorting ? order : SortOrder.ASC;\n    } else {\n      sorting = column.key === sortBy.key;\n      sortOrder = sorting ? sortBy.order : SortOrder.ASC;\n    }\n\n    const cellCls = callOrReturn(headerClassName, { columns, column, columnIndex, headerIndex });\n    const cls = cn(this._prefixClass('header-cell'), cellCls, {\n      [this._prefixClass('header-cell--align-center')]: column.align === Alignment.CENTER,\n      [this._prefixClass('header-cell--align-right')]: column.align === Alignment.RIGHT,\n      [this._prefixClass('header-cell--sortable')]: column.sortable,\n      [this._prefixClass('header-cell--sorting')]: sorting,\n      [this._prefixClass('header-cell--resizing')]: column.key === this.state.resizingKey,\n    });\n    const extraProps = callOrReturn(headerCellProps, { columns, column, columnIndex, headerIndex });\n    const { tagName, ...rest } = extraProps || {};\n    const Tag = tagName || 'div';\n    return (\n      <Tag\n        role=\"gridcell\"\n        key={`header-${headerIndex}-cell-${column.key}`}\n        onClick={column.sortable ? this._handleColumnSort : null}\n        {...rest}\n        className={cls}\n        style={this.columnManager.getColumnStyle(column.key)}\n        data-key={column.key}\n      >\n        {expandIcon}\n        {cell}\n        {column.sortable && (\n          <SortIndicator\n            sortOrder={sortOrder}\n            className={cn(this._prefixClass('sort-indicator'), {\n              [this._prefixClass('sort-indicator--descending')]: sortOrder === SortOrder.DESC,\n            })}\n          />\n        )}\n        {column.resizable && (\n          <ColumnResizer\n            className={this._prefixClass('column-resizer')}\n            column={column}\n            onResizeStart={this._handleColumnResizeStart}\n            onResizeStop={this._handleColumnResizeStop}\n            onResize={this._handleColumnResize}\n          />\n        )}\n      </Tag>\n    );\n  }\n\n  renderMainTable() {\n    const { width, headerHeight, rowHeight, fixed, estimatedRowHeight, ...rest } = this.props;\n    const height = this._getTableHeight();\n\n    let tableWidth = width - this._verticalScrollbarSize;\n    if (fixed) {\n      const columnsWidth = this.columnManager.getColumnsWidth();\n      // make sure `scrollLeft` is always integer to fix a sync bug when scrolling to end horizontally\n      tableWidth = Math.max(Math.round(columnsWidth), tableWidth);\n    }\n    return (\n      <GridTable\n        {...rest}\n        {...this.state}\n        className={this._prefixClass('table-main')}\n        ref={this._setMainTableRef}\n        data={this._data}\n        columns={this.columnManager.getMainColumns()}\n        width={width}\n        height={height}\n        headerHeight={headerHeight}\n        rowHeight={rowHeight}\n        estimatedRowHeight={estimatedRowHeight}\n        getRowHeight={estimatedRowHeight ? this._getRowHeight : undefined}\n        headerWidth={tableWidth + (fixed ? this._verticalScrollbarSize : 0)}\n        bodyWidth={tableWidth}\n        headerRenderer={this.renderHeader}\n        rowRenderer={this.renderRow}\n        onScroll={this._handleScroll}\n        onRowsRendered={this._handleRowsRendered}\n      />\n    );\n  }\n\n  renderLeftTable() {\n    if (!this.columnManager.hasLeftFrozenColumns()) return null;\n\n    const { width, headerHeight, rowHeight, estimatedRowHeight, ...rest } = this.props;\n\n    const containerHeight = this._getFrozenContainerHeight();\n    const offset = this._verticalScrollbarSize || 20;\n    const columnsWidth = this.columnManager.getLeftFrozenColumnsWidth();\n    return (\n      <GridTable\n        {...rest}\n        {...this.state}\n        containerStyle={this._getLeftTableContainerStyle(columnsWidth, width, containerHeight)}\n        className={this._prefixClass('table-frozen-left')}\n        ref={this._setLeftTableRef}\n        data={this._data}\n        columns={this.columnManager.getLeftFrozenColumns()}\n        initialScrollTop={this._scroll.scrollTop}\n        width={columnsWidth + offset}\n        height={containerHeight}\n        headerHeight={headerHeight}\n        rowHeight={rowHeight}\n        estimatedRowHeight={estimatedRowHeight}\n        getRowHeight={estimatedRowHeight ? this._getRowHeight : undefined}\n        headerWidth={columnsWidth + offset}\n        bodyWidth={columnsWidth + offset}\n        headerRenderer={this.renderHeader}\n        rowRenderer={this.renderRow}\n        onScroll={this._handleVerticalScroll}\n        onRowsRendered={noop}\n      />\n    );\n  }\n\n  renderRightTable() {\n    if (!this.columnManager.hasRightFrozenColumns()) return null;\n\n    const { width, headerHeight, rowHeight, estimatedRowHeight, ...rest } = this.props;\n\n    const containerHeight = this._getFrozenContainerHeight();\n    const columnsWidth = this.columnManager.getRightFrozenColumnsWidth();\n    const scrollbarWidth = this._verticalScrollbarSize;\n    return (\n      <GridTable\n        {...rest}\n        {...this.state}\n        containerStyle={this._getLeftTableContainerStyle(columnsWidth + scrollbarWidth, width, containerHeight)}\n        className={this._prefixClass('table-frozen-right')}\n        ref={this._setRightTableRef}\n        data={this._data}\n        columns={this.columnManager.getRightFrozenColumns()}\n        initialScrollTop={this._scroll.scrollTop}\n        width={columnsWidth + scrollbarWidth}\n        height={containerHeight}\n        headerHeight={headerHeight}\n        rowHeight={rowHeight}\n        estimatedRowHeight={estimatedRowHeight}\n        getRowHeight={estimatedRowHeight ? this._getRowHeight : undefined}\n        headerWidth={columnsWidth + scrollbarWidth}\n        bodyWidth={columnsWidth}\n        headerRenderer={this.renderHeader}\n        rowRenderer={this.renderRow}\n        onScroll={this._handleVerticalScroll}\n        onRowsRendered={noop}\n      />\n    );\n  }\n\n  renderResizingLine() {\n    const { width, fixed } = this.props;\n    const { resizingKey } = this.state;\n    if (!fixed || !resizingKey) return null;\n\n    const columns = this.columnManager.getMainColumns();\n    const idx = columns.findIndex(column => column.key === resizingKey);\n    const column = columns[idx];\n    const { width: columnWidth, frozen } = column;\n    const leftWidth = this.columnManager.recomputeColumnsWidth(columns.slice(0, idx));\n\n    let left = leftWidth + columnWidth;\n    if (!frozen) {\n      left -= this._scroll.scrollLeft;\n    } else if (frozen === FrozenDirection.RIGHT) {\n      const rightWidth = this.columnManager.recomputeColumnsWidth(columns.slice(idx + 1));\n      if (rightWidth + columnWidth > width - this._verticalScrollbarSize) {\n        left = columnWidth;\n      } else {\n        left = width - this._verticalScrollbarSize - rightWidth;\n      }\n    }\n    const style = {\n      left,\n      height: this._getTableHeight() - this._horizontalScrollbarSize,\n    };\n    return <div className={this._prefixClass('resizing-line')} style={style} />;\n  }\n\n  renderFooter() {\n    const { footerHeight, footerRenderer } = this.props;\n    if (footerHeight === 0) return null;\n    return (\n      <div className={this._prefixClass('footer')} style={{ height: footerHeight }}>\n        {renderElement(footerRenderer)}\n      </div>\n    );\n  }\n\n  renderEmptyLayer() {\n    const { data, frozenData, footerHeight, emptyRenderer } = this.props;\n\n    if ((data && data.length) || (frozenData && frozenData.length)) return null;\n    const headerHeight = this._getHeaderHeight();\n    return (\n      <div className={this._prefixClass('empty-layer')} style={{ top: headerHeight, bottom: footerHeight }}>\n        {renderElement(emptyRenderer)}\n      </div>\n    );\n  }\n\n  renderOverlay() {\n    const { overlayRenderer } = this.props;\n\n    return <div className={this._prefixClass('overlay')}>{!!overlayRenderer && renderElement(overlayRenderer)}</div>;\n  }\n\n  render() {\n    const {\n      columns,\n      children,\n      width,\n      fixed,\n      data,\n      frozenData,\n      expandColumnKey,\n      disabled,\n      className,\n      style,\n      footerHeight,\n      classPrefix,\n      estimatedRowHeight,\n    } = this.props;\n    this._resetColumnManager(getColumns(columns, children), fixed);\n\n    const _data = expandColumnKey ? this._flattenOnKeys(data, this.getExpandedRowKeys(), this.props.rowKey) : data;\n    if (this._data !== _data) {\n      this.resetAfterRowIndex(0, false);\n      this._data = _data;\n    }\n    // should be after `this._data` assigned\n    this._calcScrollbarSizes();\n    this._totalRowsHeight = this.getTotalRowsHeight();\n\n    const containerStyle = {\n      ...style,\n      width,\n      height: this._getTableHeight() + footerHeight,\n      position: 'relative',\n    };\n    const cls = cn(classPrefix, className, {\n      [`${classPrefix}--fixed`]: fixed,\n      [`${classPrefix}--expandable`]: !!expandColumnKey,\n      [`${classPrefix}--empty`]: data.length === 0,\n      [`${classPrefix}--has-frozen-rows`]: frozenData.length > 0,\n      [`${classPrefix}--has-frozen-columns`]: this.columnManager.hasFrozenColumns(),\n      [`${classPrefix}--disabled`]: disabled,\n      [`${classPrefix}--dynamic`]: estimatedRowHeight > 0,\n    });\n    return (\n      <div ref={this._setContainerRef} className={cls} style={containerStyle}>\n        {this.renderFooter()}\n        {this.renderMainTable()}\n        {this.renderLeftTable()}\n        {this.renderRightTable()}\n        {this.renderResizingLine()}\n        {this.renderEmptyLayer()}\n        {this.renderOverlay()}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const scrollbarSize = this.props.getScrollbarSize();\n    if (scrollbarSize > 0) {\n      this.setState({ scrollbarSize });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { data, height, maxHeight, estimatedRowHeight } = this.props;\n    if (data !== prevProps.data) {\n      this._lastScannedRowIndex = -1;\n      this._hasDataChangedSinceEndReached = true;\n    }\n\n    if (maxHeight !== prevProps.maxHeight || height !== prevProps.height) {\n      this._maybeCallOnEndReached();\n    }\n    this._maybeScrollbarPresenceChange();\n\n    if (estimatedRowHeight) {\n      if (this.getTotalRowsHeight() !== this._totalRowsHeight) {\n        this.forceUpdate();\n      }\n    }\n  }\n\n  _prefixClass(className) {\n    return `${this.props.classPrefix}__${className}`;\n  }\n\n  _setContainerRef(ref) {\n    this.tableNode = ref;\n  }\n\n  _setMainTableRef(ref) {\n    this.table = ref;\n  }\n\n  _setLeftTableRef(ref) {\n    this.leftTable = ref;\n  }\n\n  _setRightTableRef(ref) {\n    this.rightTable = ref;\n  }\n\n  _getComponent(name) {\n    if (this.props.components && this.props.components[name]) return this.props.components[name];\n    return DEFAULT_COMPONENTS[name];\n  }\n\n  // for dynamic row height\n  _getRowHeight(rowIndex) {\n    const { estimatedRowHeight, rowKey } = this.props;\n    return this._rowHeightMap[this._data[rowIndex][rowKey]] || estimatedRowHeight;\n  }\n\n  _getIsResetting() {\n    return this._isResetting;\n  }\n\n  _getHeaderHeight() {\n    const { headerHeight } = this.props;\n    if (Array.isArray(headerHeight)) {\n      return headerHeight.reduce((sum, height) => sum + height, 0);\n    }\n    return headerHeight;\n  }\n\n  _getFrozenRowsHeight() {\n    const { frozenData, rowHeight } = this.props;\n    return frozenData.length * rowHeight;\n  }\n\n  _getTableHeight() {\n    const { height, maxHeight, footerHeight } = this.props;\n    let tableHeight = height - footerHeight;\n\n    if (maxHeight > 0) {\n      const frozenRowsHeight = this._getFrozenRowsHeight();\n      const totalRowsHeight = this.getTotalRowsHeight();\n      const headerHeight = this._getHeaderHeight();\n      const totalHeight = headerHeight + frozenRowsHeight + totalRowsHeight + this._horizontalScrollbarSize;\n      tableHeight = Math.min(totalHeight, maxHeight - footerHeight);\n    }\n\n    return tableHeight;\n  }\n\n  _getBodyHeight() {\n    return this._getTableHeight() - this._getHeaderHeight() - this._getFrozenRowsHeight();\n  }\n\n  _getFrozenContainerHeight() {\n    const { maxHeight } = this.props;\n\n    const tableHeight = this._getTableHeight() - (this._data.length > 0 ? this._horizontalScrollbarSize : 0);\n    // in auto height mode tableHeight = totalHeight\n    if (maxHeight > 0) return tableHeight;\n\n    const totalHeight = this.getTotalRowsHeight() + this._getHeaderHeight() + this._getFrozenRowsHeight();\n    return Math.min(tableHeight, totalHeight);\n  }\n\n  _calcScrollbarSizes() {\n    const { fixed, width } = this.props;\n    const { scrollbarSize } = this.state;\n\n    const totalRowsHeight = this.getTotalRowsHeight();\n    const totalColumnsWidth = this.getTotalColumnsWidth();\n\n    const prevHorizontalScrollbarSize = this._horizontalScrollbarSize;\n    const prevVerticalScrollbarSize = this._verticalScrollbarSize;\n\n    if (scrollbarSize === 0) {\n      this._horizontalScrollbarSize = 0;\n      this._verticalScrollbarSize = 0;\n    } else {\n      // we have to set `this._horizontalScrollbarSize` before calling `this._getBodyHeight`\n      if (!fixed || totalColumnsWidth <= width - scrollbarSize) {\n        this._horizontalScrollbarSize = 0;\n        this._verticalScrollbarSize = totalRowsHeight > this._getBodyHeight() ? scrollbarSize : 0;\n      } else {\n        if (totalColumnsWidth > width) {\n          this._horizontalScrollbarSize = scrollbarSize;\n          this._verticalScrollbarSize =\n            totalRowsHeight > this._getBodyHeight() - this._horizontalScrollbarSize ? scrollbarSize : 0;\n        } else {\n          this._horizontalScrollbarSize = 0;\n          this._verticalScrollbarSize = 0;\n          if (totalRowsHeight > this._getBodyHeight()) {\n            this._horizontalScrollbarSize = scrollbarSize;\n            this._verticalScrollbarSize = scrollbarSize;\n          }\n        }\n      }\n    }\n\n    if (\n      prevHorizontalScrollbarSize !== this._horizontalScrollbarSize ||\n      prevVerticalScrollbarSize !== this._verticalScrollbarSize\n    ) {\n      this._scrollbarPresenceChanged = true;\n    }\n  }\n\n  _maybeScrollbarPresenceChange() {\n    if (this._scrollbarPresenceChanged) {\n      const { onScrollbarPresenceChange } = this.props;\n      this._scrollbarPresenceChanged = false;\n\n      onScrollbarPresenceChange({\n        size: this.state.scrollbarSize,\n        horizontal: this._horizontalScrollbarSize > 0,\n        vertical: this._verticalScrollbarSize > 0,\n      });\n    }\n  }\n\n  _maybeCallOnEndReached() {\n    const { onEndReached, onEndReachedThreshold } = this.props;\n    const { scrollTop } = this._scroll;\n    const scrollHeight = this.getTotalRowsHeight();\n    const clientHeight = this._getBodyHeight();\n\n    if (!onEndReached || !clientHeight || !scrollHeight) return;\n    const distanceFromEnd = scrollHeight - scrollTop - clientHeight + this._horizontalScrollbarSize;\n    if (\n      this._lastScannedRowIndex >= 0 &&\n      distanceFromEnd <= onEndReachedThreshold &&\n      (this._hasDataChangedSinceEndReached || scrollHeight !== this._scrollHeight)\n    ) {\n      this._hasDataChangedSinceEndReached = false;\n      this._scrollHeight = scrollHeight;\n      onEndReached({ distanceFromEnd });\n    }\n  }\n\n  _handleScroll(args) {\n    const lastScrollTop = this._scroll.scrollTop;\n    this.scrollToPosition(args);\n    this.props.onScroll(args);\n\n    if (args.scrollTop > lastScrollTop) this._maybeCallOnEndReached();\n  }\n\n  _handleVerticalScroll({ scrollTop }) {\n    const lastScrollTop = this._scroll.scrollTop;\n\n    if (scrollTop !== lastScrollTop) this.scrollToTop(scrollTop);\n    if (scrollTop > lastScrollTop) this._maybeCallOnEndReached();\n  }\n\n  _handleRowsRendered(args) {\n    this.props.onRowsRendered(args);\n\n    if (args.overscanStopIndex > this._lastScannedRowIndex) {\n      this._lastScannedRowIndex = args.overscanStopIndex;\n      this._maybeCallOnEndReached();\n    }\n  }\n\n  _handleRowHover({ hovered, rowKey }) {\n    this.setState({ hoveredRowKey: hovered ? rowKey : null });\n  }\n\n  _handleRowExpand({ expanded, rowData, rowIndex, rowKey }) {\n    const expandedRowKeys = cloneArray(this.getExpandedRowKeys());\n    if (expanded) {\n      if (!expandedRowKeys.indexOf(rowKey) >= 0) expandedRowKeys.push(rowKey);\n    } else {\n      const index = expandedRowKeys.indexOf(rowKey);\n      if (index > -1) {\n        expandedRowKeys.splice(index, 1);\n      }\n    }\n    // if `expandedRowKeys` is uncontrolled, update internal state\n    if (this.props.expandedRowKeys === undefined) {\n      this.setState({ expandedRowKeys });\n    }\n    this.props.onRowExpand({ expanded, rowData, rowIndex, rowKey });\n    this.props.onExpandedRowsChange(expandedRowKeys);\n  }\n\n  _handleColumnResize({ key }, width) {\n    this.columnManager.setColumnWidth(key, width);\n    this.setState({ resizingWidth: width });\n\n    const column = this.columnManager.getColumn(key);\n    this.props.onColumnResize({ column, width });\n  }\n\n  _handleColumnResizeStart({ key }) {\n    this.setState({ resizingKey: key });\n  }\n\n  _handleColumnResizeStop() {\n    const { resizingKey, resizingWidth } = this.state;\n    this.setState({ resizingKey: null, resizingWidth: 0 });\n\n    if (!resizingKey || !resizingWidth) return;\n\n    const column = this.columnManager.getColumn(resizingKey);\n    this.props.onColumnResizeEnd({ column, width: resizingWidth });\n  }\n\n  _handleColumnSort(event) {\n    const key = event.currentTarget.dataset.key;\n    const { sortBy, sortState, onColumnSort } = this.props;\n    let order = SortOrder.ASC;\n\n    if (sortState) {\n      order = sortState[key] === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n    } else if (key === sortBy.key) {\n      order = sortBy.order === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n    }\n\n    const column = this.columnManager.getColumn(key);\n    onColumnSort({ column, key, order });\n  }\n\n  _handleFrozenRowHeightChange(rowKey, size, rowIndex, frozen) {\n    if (!frozen) {\n      this._mainRowHeightMap[rowKey] = size;\n    } else if (frozen === FrozenDirection.RIGHT) {\n      this._rightRowHeightMap[rowKey] = size;\n    } else {\n      this._leftRowHeightMap[rowKey] = size;\n    }\n\n    const height = Math.max(\n      this._mainRowHeightMap[rowKey] || 0,\n      this._leftRowHeightMap[rowKey] || 0,\n      this._rightRowHeightMap[rowKey] || 0\n    );\n\n    if (this._rowHeightMap[rowKey] !== height) {\n      this._handleRowHeightChange(rowKey, height, rowIndex);\n    }\n  }\n\n  _handleRowHeightChange(rowKey, size, rowIndex) {\n    if (this._resetIndex === null) this._resetIndex = rowIndex;\n    else if (this._resetIndex > rowIndex) this._resetIndex = rowIndex;\n\n    this._rowHeightMapBuffer[rowKey] = size;\n    this._updateRowHeights();\n  }\n}\n\nBaseTable.Column = Column;\nBaseTable.PlaceholderKey = ColumnManager.PlaceholderKey;\n\nBaseTable.defaultProps = {\n  classPrefix: 'BaseTable',\n  rowKey: 'id',\n  data: [],\n  frozenData: [],\n  fixed: false,\n  headerHeight: 50,\n  rowHeight: 50,\n  footerHeight: 0,\n  defaultExpandedRowKeys: [],\n  sortBy: {},\n  useIsScrolling: false,\n  overscanRowCount: 1,\n  onEndReachedThreshold: 500,\n  getScrollbarSize: defaultGetScrollbarSize,\n  ignoreFunctionInColumnCompare: true,\n\n  onScroll: noop,\n  onRowsRendered: noop,\n  onScrollbarPresenceChange: noop,\n  onRowExpand: noop,\n  onExpandedRowsChange: noop,\n  onColumnSort: noop,\n  onColumnResize: noop,\n  onColumnResizeEnd: noop,\n};\n\nBaseTable.propTypes = {\n  /**\n   * Prefix for table's inner className\n   */\n  classPrefix: PropTypes.string,\n  /**\n   * Class name for the table\n   */\n  className: PropTypes.string,\n  /**\n   * Custom style for the table\n   */\n  style: PropTypes.object,\n  /**\n   * A collection of Column\n   */\n  children: PropTypes.node,\n  /**\n   * Columns for the table\n   */\n  columns: PropTypes.arrayOf(PropTypes.shape(Column.propTypes)),\n  /**\n   * The data for the table\n   */\n  data: PropTypes.array.isRequired,\n  /**\n   * The data be frozen to top, `rowIndex` is negative and started from `-1`\n   */\n  frozenData: PropTypes.array,\n  /**\n   * The key field of each data item\n   */\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  /**\n   * The width of the table\n   */\n  width: PropTypes.number.isRequired,\n  /**\n   * The height of the table, will be ignored if `maxHeight` is set\n   */\n  height: PropTypes.number,\n  /**\n   * The max height of the table, the table's height will auto change when data changes,\n   * will turns to vertical scroll if reaches the max height\n   */\n  maxHeight: PropTypes.number,\n  /**\n   * The height of each table row, will be only used by frozen rows if `estimatedRowHeight` is set\n   */\n  rowHeight: PropTypes.number,\n  /**\n   * Estimated row height, the real height will be measure dynamically according to the content\n   */\n  estimatedRowHeight: PropTypes.number,\n  /**\n   * The height of the table header, set to 0 to hide the header, could be an array to render multi headers.\n   */\n  headerHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]).isRequired,\n  /**\n   * The height of the table footer\n   */\n  footerHeight: PropTypes.number,\n  /**\n   * Whether the width of the columns are fixed or flexible\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Whether the table is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Custom renderer on top of the table component\n   */\n  overlayRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom renderer when the length of data is 0\n   */\n  emptyRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom footer renderer, available only if `footerHeight` is larger then 0\n   */\n  footerRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom header renderer\n   * The renderer receives props `{ cells, columns, headerIndex }`\n   */\n  headerRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom row renderer\n   * The renderer receives props `{ isScrolling, cells, columns, rowData, rowIndex, depth }`\n   */\n  rowRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Class name for the table header, could be a callback to return the class name\n   * The callback is of the shape of `({ columns, headerIndex }) => string`\n   */\n  headerClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  /**\n   * Class name for the table row, could be a callback to return the class name\n   * The callback is of the shape of `({ columns, rowData, rowIndex }) => string`\n   */\n  rowClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  /**\n   * Extra props applied to header element\n   * The handler is of the shape of `({ columns, headerIndex }) object`\n   */\n  headerProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to header cell element\n   * The handler is of the shape of `({ columns, column, columnIndex, headerIndex }) => object`\n   */\n  headerCellProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to row element\n   * The handler is of the shape of `({ columns, rowData, rowIndex }) => object`\n   */\n  rowProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to row cell element\n   * The handler is of the shape of `({ columns, column, columnIndex, rowData, rowIndex }) => object`\n   */\n  cellProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to ExpandIcon component\n   * The handler is of the shape of `({ rowData, rowIndex, depth, expandable, expanded }) => object`\n   */\n  expandIconProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * The key for the expand column which render the expand icon if the data is a tree\n   */\n  expandColumnKey: PropTypes.string,\n  /**\n   * Default expanded row keys when initialize the table\n   */\n  defaultExpandedRowKeys: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  /**\n   * Controlled expanded row keys\n   */\n  expandedRowKeys: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  /**\n   * A callback function when expand or collapse a tree node\n   * The handler is of the shape of `({ expanded, rowData, rowIndex, rowKey }) => *`\n   */\n  onRowExpand: PropTypes.func,\n  /**\n   * A callback function when the expanded row keys changed\n   * The handler is of the shape of `(expandedRowKeys) => *`\n   */\n  onExpandedRowsChange: PropTypes.func,\n  /**\n   * The sort state for the table, will be ignored if `sortState` is set\n   */\n  sortBy: PropTypes.shape({\n    /**\n     * Sort key\n     */\n    key: PropTypes.string,\n    /**\n     * Sort order\n     */\n    order: PropTypes.oneOf([SortOrder.ASC, SortOrder.DESC]),\n  }),\n  /**\n   * Multiple columns sort state for the table\n   *\n   * example:\n   * ```js\n   * {\n   *   'column-0': SortOrder.ASC,\n   *   'column-1': SortOrder.DESC,\n   * }\n   * ```\n   */\n  sortState: PropTypes.object,\n  /**\n   * A callback function for the header cell click event\n   * The handler is of the shape of `({ column, key, order }) => *`\n   */\n  onColumnSort: PropTypes.func,\n  /**\n   * A callback function when resizing the column width\n   * The handler is of the shape of `({ column, width }) => *`\n   */\n  onColumnResize: PropTypes.func,\n  /**\n   * A callback function when resizing the column width ends\n   * The handler is of the shape of `({ column, width }) => *`\n   */\n  onColumnResizeEnd: PropTypes.func,\n  /**\n   * Adds an additional isScrolling parameter to the row renderer.\n   * This parameter can be used to show a placeholder row while scrolling.\n   */\n  useIsScrolling: PropTypes.bool,\n  /**\n   * Number of rows to render above/below the visible bounds of the list\n   */\n  overscanRowCount: PropTypes.number,\n  /**\n   * Custom scrollbar size measurement\n   */\n  getScrollbarSize: PropTypes.func,\n  /**\n   * A callback function when scrolling the table\n   * The handler is of the shape of `({ scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested }) => *`\n   *\n   * `scrollLeft` and `scrollTop` are numbers.\n   *\n   * `horizontalDirection` and `verticalDirection` are either `forward` or `backward`.\n   *\n   * `scrollUpdateWasRequested` is a boolean. This value is true if the scroll was caused by `scrollTo*`,\n   * and false if it was the result of a user interaction in the browser.\n   */\n  onScroll: PropTypes.func,\n  /**\n   * A callback function when scrolling the table within `onEndReachedThreshold` of the bottom\n   * The handler is of the shape of `({ distanceFromEnd }) => *`\n   */\n  onEndReached: PropTypes.func,\n  /**\n   * Threshold in pixels for calling `onEndReached`.\n   */\n  onEndReachedThreshold: PropTypes.number,\n  /**\n   * A callback function with information about the slice of rows that were just rendered\n   * The handler is of the shape of `({ overscanStartIndex, overscanStopIndex, startIndex， stopIndex }) => *`\n   */\n  onRowsRendered: PropTypes.func,\n  /**\n   * A callback function when the scrollbar presence state changed\n   * The handler is of the shape of `({ size, vertical, horizontal }) => *`\n   */\n  onScrollbarPresenceChange: PropTypes.func,\n  /**\n   * A object for the row event handlers\n   * Each of the keys is row event name, like `onClick`, `onDoubleClick` and etc.\n   * Each of the handlers is of the shape of `({ rowData, rowIndex, rowKey, event }) => *`\n   */\n  rowEventHandlers: PropTypes.object,\n  /**\n   * whether to ignore function properties while comparing column definition\n   */\n  ignoreFunctionInColumnCompare: PropTypes.bool,\n  /**\n   * A object for the custom components, like `ExpandIcon` and `SortIndicator`\n   */\n  components: PropTypes.shape({\n    TableCell: PropTypes.func,\n    TableHeaderCell: PropTypes.func,\n    ExpandIcon: PropTypes.func,\n    SortIndicator: PropTypes.func,\n  }),\n};\n\nexport default BaseTable;\n"]},"metadata":{},"sourceType":"module"}