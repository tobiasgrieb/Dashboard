{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, addClassName, removeClassName } from './utils';\nvar INVALID_VALUE = null; // copied from https://github.com/mzabriskie/react-draggable/blob/master/lib/utils/domFns.js\n\nexport function addUserSelectStyles(doc) {\n  if (!doc) return;\n  var styleEl = doc.getElementById('react-draggable-style-el');\n\n  if (!styleEl) {\n    styleEl = doc.createElement('style');\n    styleEl.type = 'text/css';\n    styleEl.id = 'react-draggable-style-el';\n    styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {all: inherit;}\\n';\n    styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {all: inherit;}\\n';\n    doc.getElementsByTagName('head')[0].appendChild(styleEl);\n  }\n\n  if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');\n}\nexport function removeUserSelectStyles(doc) {\n  if (!doc) return;\n\n  try {\n    if (doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection');\n\n    if (doc.selection) {\n      doc.selection.empty();\n    } else {\n      // Remove selection caused by scroll, unless it's a focused input\n      // (we use doc.defaultView in case we're in an iframe)\n      var selection = (doc.defaultView || window).getSelection();\n\n      if (selection && selection.type !== 'Caret') {\n        selection.removeAllRanges();\n      }\n    }\n  } catch (e) {// probably IE\n  }\n}\nvar eventsFor = {\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend'\n  },\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup'\n  }\n};\nvar dragEventFor = eventsFor.mouse;\n/**\n * ColumnResizer for BaseTable\n */\n\nvar ColumnResizer = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(ColumnResizer, _React$PureComponent);\n\n  function ColumnResizer(props) {\n    var _this;\n\n    _this = _React$PureComponent.call(this, props) || this;\n    _this.isDragging = false;\n    _this.lastX = INVALID_VALUE;\n    _this.width = 0;\n    _this._setHandleRef = _this._setHandleRef.bind(_assertThisInitialized(_this));\n    _this._handleClick = _this._handleClick.bind(_assertThisInitialized(_this));\n    _this._handleMouseDown = _this._handleMouseDown.bind(_assertThisInitialized(_this));\n    _this._handleMouseUp = _this._handleMouseUp.bind(_assertThisInitialized(_this));\n    _this._handleTouchStart = _this._handleTouchStart.bind(_assertThisInitialized(_this));\n    _this._handleTouchEnd = _this._handleTouchEnd.bind(_assertThisInitialized(_this));\n    _this._handleDragStart = _this._handleDragStart.bind(_assertThisInitialized(_this));\n    _this._handleDragStop = _this._handleDragStop.bind(_assertThisInitialized(_this));\n    _this._handleDrag = _this._handleDrag.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = ColumnResizer.prototype;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.handleRef) {\n      var ownerDocument = this.handleRef.ownerDocument;\n      ownerDocument.removeEventListener(eventsFor.mouse.move, this._handleDrag);\n      ownerDocument.removeEventListener(eventsFor.mouse.stop, this._handleDragStop);\n      ownerDocument.removeEventListener(eventsFor.touch.move, this._handleDrag);\n      ownerDocument.removeEventListener(eventsFor.touch.stop, this._handleDragStop);\n      removeUserSelectStyles(ownerDocument);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        style = _this$props.style,\n        column = _this$props.column,\n        onResizeStart = _this$props.onResizeStart,\n        onResize = _this$props.onResize,\n        onResizeStop = _this$props.onResizeStop,\n        minWidth = _this$props.minWidth,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"style\", \"column\", \"onResizeStart\", \"onResize\", \"onResizeStop\", \"minWidth\"]);\n\n    return React.createElement(\"div\", _extends({}, rest, {\n      ref: this._setHandleRef,\n      onClick: this._handleClick,\n      onMouseDown: this._handleMouseDown,\n      onMouseUp: this._handleMouseUp,\n      onTouchStart: this._handleTouchStart,\n      onTouchEnd: this._handleTouchEnd,\n      style: _objectSpread({\n        userSelect: 'none',\n        touchAction: 'none',\n        position: 'absolute',\n        top: 0,\n        bottom: 0,\n        right: 0,\n        cursor: 'col-resize'\n      }, style)\n    }));\n  };\n\n  _proto._setHandleRef = function _setHandleRef(ref) {\n    this.handleRef = ref;\n  };\n\n  _proto._handleClick = function _handleClick(e) {\n    e.stopPropagation();\n  };\n\n  _proto._handleMouseDown = function _handleMouseDown(e) {\n    dragEventFor = eventsFor.mouse;\n\n    this._handleDragStart(e);\n  };\n\n  _proto._handleMouseUp = function _handleMouseUp(e) {\n    dragEventFor = eventsFor.mouse;\n\n    this._handleDragStop(e);\n  };\n\n  _proto._handleTouchStart = function _handleTouchStart(e) {\n    dragEventFor = eventsFor.touch;\n\n    this._handleDragStart(e);\n  };\n\n  _proto._handleTouchEnd = function _handleTouchEnd(e) {\n    dragEventFor = eventsFor.touch;\n\n    this._handleDragStop(e);\n  };\n\n  _proto._handleDragStart = function _handleDragStart(e) {\n    if (typeof e.button === 'number' && e.button !== 0) return;\n    this.isDragging = true;\n    this.lastX = INVALID_VALUE;\n    this.width = this.props.column.width;\n    this.props.onResizeStart(this.props.column);\n    var ownerDocument = this.handleRef.ownerDocument;\n    addUserSelectStyles(ownerDocument);\n    ownerDocument.addEventListener(dragEventFor.move, this._handleDrag);\n    ownerDocument.addEventListener(dragEventFor.stop, this._handleDragStop);\n  };\n\n  _proto._handleDragStop = function _handleDragStop(e) {\n    if (!this.isDragging) return;\n    this.isDragging = false;\n    this.props.onResizeStop(this.props.column);\n    var ownerDocument = this.handleRef.ownerDocument;\n    removeUserSelectStyles(ownerDocument);\n    ownerDocument.removeEventListener(dragEventFor.move, this._handleDrag);\n    ownerDocument.removeEventListener(dragEventFor.stop, this._handleDragStop);\n  };\n\n  _proto._handleDrag = function _handleDrag(e) {\n    var clientX = e.clientX;\n\n    if (e.type === eventsFor.touch.move) {\n      e.preventDefault();\n      if (e.targetTouches && e.targetTouches[0]) clientX = e.targetTouches[0].clientX;\n    }\n\n    var offsetParent = this.handleRef.offsetParent;\n    var offsetParentRect = offsetParent.getBoundingClientRect();\n    var x = clientX + offsetParent.scrollLeft - offsetParentRect.left;\n\n    if (this.lastX === INVALID_VALUE) {\n      this.lastX = x;\n      return;\n    }\n\n    var _this$props2 = this.props,\n        column = _this$props2.column,\n        MIN_WIDTH = _this$props2.minWidth;\n    var width = column.width,\n        maxWidth = column.maxWidth,\n        _column$minWidth = column.minWidth,\n        minWidth = _column$minWidth === void 0 ? MIN_WIDTH : _column$minWidth;\n    var movedX = x - this.lastX;\n    if (!movedX) return;\n    this.width = this.width + movedX;\n    this.lastX = x;\n    var newWidth = this.width;\n\n    if (maxWidth && newWidth > maxWidth) {\n      newWidth = maxWidth;\n    } else if (newWidth < minWidth) {\n      newWidth = minWidth;\n    }\n\n    if (newWidth === width) return;\n    this.props.onResize(column, newWidth);\n  };\n\n  return ColumnResizer;\n}(React.PureComponent);\n\nColumnResizer.defaultProps = {\n  onResizeStart: noop,\n  onResize: noop,\n  onResizeStop: noop,\n  minWidth: 30\n};\nColumnResizer.propTypes = {\n  /**\n   * Custom style for the drag handler\n   */\n  style: PropTypes.object,\n\n  /**\n   * The column object to be dragged\n   */\n  column: PropTypes.object,\n\n  /**\n   * A callback function when resizing started\n   * The callback is of the shape of `(column) => *`\n   */\n  onResizeStart: PropTypes.func,\n\n  /**\n   * A callback function when resizing the column\n   * The callback is of the shape of `(column, width) => *`\n   */\n  onResize: PropTypes.func,\n\n  /**\n   * A callback function when resizing stopped\n   * The callback is of the shape of `(column) => *`\n   */\n  onResizeStop: PropTypes.func,\n\n  /**\n   * Minimum width of the column could be resized to if the column's `minWidth` is not set\n   */\n  minWidth: PropTypes.number\n};\nexport default ColumnResizer;","map":{"version":3,"sources":["../src/ColumnResizer.js"],"names":["INVALID_VALUE","styleEl","doc","addClassName","removeClassName","selection","eventsFor","touch","start","move","stop","mouse","dragEventFor","ColumnResizer","React","PureComponent","componentWillUnmount","ownerDocument","removeUserSelectStyles","render","style","column","onResizeStart","onResize","onResizeStop","minWidth","rest","userSelect","touchAction","position","top","bottom","right","cursor","_setHandleRef","_handleClick","e","_handleMouseDown","_handleMouseUp","_handleTouchStart","_handleTouchEnd","_handleDragStart","addUserSelectStyles","_handleDragStop","_handleDrag","clientX","offsetParent","offsetParentRect","x","MIN_WIDTH","width","maxWidth","movedX","newWidth","PropTypes","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { noop, addClassName, removeClassName } from './utils';\n\nconst INVALID_VALUE = null;\n\n// copied from https://github.com/mzabriskie/react-draggable/blob/master/lib/utils/domFns.js\nexport function addUserSelectStyles(doc) {\n  if (!doc) return;\n  let styleEl = doc.getElementById('react-draggable-style-el');\n  if (!styleEl) {\n    styleEl = doc.createElement('style');\n    styleEl.type = 'text/css';\n    styleEl.id = 'react-draggable-style-el';\n    styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {all: inherit;}\\n';\n    styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {all: inherit;}\\n';\n    doc.getElementsByTagName('head')[0].appendChild(styleEl);\n  }\n  if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');\n}\n\nexport function removeUserSelectStyles(doc) {\n  if (!doc) return;\n  try {\n    if (doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection');\n    if (doc.selection) {\n      doc.selection.empty();\n    } else {\n      // Remove selection caused by scroll, unless it's a focused input\n      // (we use doc.defaultView in case we're in an iframe)\n      const selection = (doc.defaultView || window).getSelection();\n      if (selection && selection.type !== 'Caret') {\n        selection.removeAllRanges();\n      }\n    }\n  } catch (e) {\n    // probably IE\n  }\n}\n\nconst eventsFor = {\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend',\n  },\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup',\n  },\n};\n\nlet dragEventFor = eventsFor.mouse;\n\n/**\n * ColumnResizer for BaseTable\n */\nclass ColumnResizer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.isDragging = false;\n    this.lastX = INVALID_VALUE;\n    this.width = 0;\n\n    this._setHandleRef = this._setHandleRef.bind(this);\n    this._handleClick = this._handleClick.bind(this);\n    this._handleMouseDown = this._handleMouseDown.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this._handleTouchStart = this._handleTouchStart.bind(this);\n    this._handleTouchEnd = this._handleTouchEnd.bind(this);\n    this._handleDragStart = this._handleDragStart.bind(this);\n    this._handleDragStop = this._handleDragStop.bind(this);\n    this._handleDrag = this._handleDrag.bind(this);\n  }\n\n  componentWillUnmount() {\n    if (this.handleRef) {\n      const { ownerDocument } = this.handleRef;\n      ownerDocument.removeEventListener(eventsFor.mouse.move, this._handleDrag);\n      ownerDocument.removeEventListener(eventsFor.mouse.stop, this._handleDragStop);\n      ownerDocument.removeEventListener(eventsFor.touch.move, this._handleDrag);\n      ownerDocument.removeEventListener(eventsFor.touch.stop, this._handleDragStop);\n      removeUserSelectStyles(ownerDocument);\n    }\n  }\n\n  render() {\n    const { style, column, onResizeStart, onResize, onResizeStop, minWidth, ...rest } = this.props;\n\n    return (\n      <div\n        {...rest}\n        ref={this._setHandleRef}\n        onClick={this._handleClick}\n        onMouseDown={this._handleMouseDown}\n        onMouseUp={this._handleMouseUp}\n        onTouchStart={this._handleTouchStart}\n        onTouchEnd={this._handleTouchEnd}\n        style={{\n          userSelect: 'none',\n          touchAction: 'none',\n          position: 'absolute',\n          top: 0,\n          bottom: 0,\n          right: 0,\n          cursor: 'col-resize',\n          ...style,\n        }}\n      />\n    );\n  }\n\n  _setHandleRef(ref) {\n    this.handleRef = ref;\n  }\n\n  _handleClick(e) {\n    e.stopPropagation();\n  }\n\n  _handleMouseDown(e) {\n    dragEventFor = eventsFor.mouse;\n    this._handleDragStart(e);\n  }\n\n  _handleMouseUp(e) {\n    dragEventFor = eventsFor.mouse;\n    this._handleDragStop(e);\n  }\n\n  _handleTouchStart(e) {\n    dragEventFor = eventsFor.touch;\n    this._handleDragStart(e);\n  }\n\n  _handleTouchEnd(e) {\n    dragEventFor = eventsFor.touch;\n    this._handleDragStop(e);\n  }\n\n  _handleDragStart(e) {\n    if (typeof e.button === 'number' && e.button !== 0) return;\n\n    this.isDragging = true;\n    this.lastX = INVALID_VALUE;\n    this.width = this.props.column.width;\n    this.props.onResizeStart(this.props.column);\n\n    const { ownerDocument } = this.handleRef;\n    addUserSelectStyles(ownerDocument);\n    ownerDocument.addEventListener(dragEventFor.move, this._handleDrag);\n    ownerDocument.addEventListener(dragEventFor.stop, this._handleDragStop);\n  }\n\n  _handleDragStop(e) {\n    if (!this.isDragging) return;\n    this.isDragging = false;\n\n    this.props.onResizeStop(this.props.column);\n\n    const { ownerDocument } = this.handleRef;\n    removeUserSelectStyles(ownerDocument);\n    ownerDocument.removeEventListener(dragEventFor.move, this._handleDrag);\n    ownerDocument.removeEventListener(dragEventFor.stop, this._handleDragStop);\n  }\n\n  _handleDrag(e) {\n    let clientX = e.clientX;\n    if (e.type === eventsFor.touch.move) {\n      e.preventDefault();\n      if (e.targetTouches && e.targetTouches[0]) clientX = e.targetTouches[0].clientX;\n    }\n\n    const { offsetParent } = this.handleRef;\n    const offsetParentRect = offsetParent.getBoundingClientRect();\n    const x = clientX + offsetParent.scrollLeft - offsetParentRect.left;\n\n    if (this.lastX === INVALID_VALUE) {\n      this.lastX = x;\n      return;\n    }\n\n    const { column, minWidth: MIN_WIDTH } = this.props;\n    const { width, maxWidth, minWidth = MIN_WIDTH } = column;\n    const movedX = x - this.lastX;\n    if (!movedX) return;\n\n    this.width = this.width + movedX;\n    this.lastX = x;\n\n    let newWidth = this.width;\n    if (maxWidth && newWidth > maxWidth) {\n      newWidth = maxWidth;\n    } else if (newWidth < minWidth) {\n      newWidth = minWidth;\n    }\n\n    if (newWidth === width) return;\n    this.props.onResize(column, newWidth);\n  }\n}\n\nColumnResizer.defaultProps = {\n  onResizeStart: noop,\n  onResize: noop,\n  onResizeStop: noop,\n  minWidth: 30,\n};\n\nColumnResizer.propTypes = {\n  /**\n   * Custom style for the drag handler\n   */\n  style: PropTypes.object,\n  /**\n   * The column object to be dragged\n   */\n  column: PropTypes.object,\n  /**\n   * A callback function when resizing started\n   * The callback is of the shape of `(column) => *`\n   */\n  onResizeStart: PropTypes.func,\n  /**\n   * A callback function when resizing the column\n   * The callback is of the shape of `(column, width) => *`\n   */\n  onResize: PropTypes.func,\n  /**\n   * A callback function when resizing stopped\n   * The callback is of the shape of `(column) => *`\n   */\n  onResizeStop: PropTypes.func,\n  /**\n   * Minimum width of the column could be resized to if the column's `minWidth` is not set\n   */\n  minWidth: PropTypes.number,\n};\n\nexport default ColumnResizer;\n"]},"metadata":{},"sourceType":"module"}