{"version":3,"sources":["../src/BaseTable.js"],"names":["React","PropTypes","cn","memoize","GridTable","TableHeaderRow","TableRow","TableHeaderCell","TableCell","Column","Alignment","FrozenDirection","SortOrder","ExpandIcon","SortIndicator","ColumnResizer","ColumnManager","renderElement","normalizeColumns","getScrollbarSize","defaultGetScrollbarSize","isObjectEqual","callOrReturn","hasChildren","flattenOnKeys","cloneArray","getValue","throttle","debounce","noop","getColumns","columns","children","getContainerStyle","width","maxWidth","height","overflow","DEFAULT_COMPONENTS","RESIZE_THROTTLE_WAIT","EMPTY_ARRAY","BaseTable","props","defaultExpandedRowKeys","state","scrollbarSize","hoveredRowKey","resizingKey","resizingWidth","expandedRowKeys","columnManager","fixed","_setContainerRef","bind","_setMainTableRef","_setLeftTableRef","_setRightTableRef","renderExpandIcon","renderRow","renderRowCell","renderHeader","renderHeaderCell","_handleScroll","_handleVerticalScroll","_handleRowsRendered","_handleRowHover","_handleRowExpand","_handleColumnResize","_handleColumnResizeStart","_handleColumnResizeStop","_handleColumnSort","_handleFrozenRowHeightChange","_handleRowHeightChange","_getLeftTableContainerStyle","_getRightTableContainerStyle","_flattenOnKeys","tree","keys","dataKey","_depthMap","_resetColumnManager","reset","estimatedRowHeight","hasLeftFrozenColumns","_leftRowHeightMap","hasRightFrozenColumns","_rightRowHeightMap","newArgs","lastArgs","ignoreFunctionInColumnCompare","_isResetting","_resetIndex","_rowHeightMap","_rowHeightMapBuffer","_mainRowHeightMap","_getRowHeight","_updateRowHeights","resetAfterRowIndex","forceUpdateTable","forceUpdate","_scroll","scrollLeft","scrollTop","_scrollHeight","_lastScannedRowIndex","_hasDataChangedSinceEndReached","_data","data","_horizontalScrollbarSize","_verticalScrollbarSize","_scrollbarPresenceChanged","getDOMNode","tableNode","getColumnManager","getExpandedRowKeys","undefined","getExpandedState","expandedData","expandedDepthMap","getTotalRowsHeight","rowHeight","table","length","getTotalColumnsWidth","getColumnsWidth","leftTable","rightTable","rowIndex","shouldForceUpdate","resetRowHeightCache","scrollToPosition","offset","scrollToTop","scrollToLeft","scrollToRow","align","setExpandedRowKeys","setState","rowData","depth","onExpand","rowKey","expandColumnKey","expandIconProps","expandable","expanded","indexOf","extraProps","_getComponent","isScrolling","style","rowClassName","rowRenderer","rowEventHandlers","rowClass","rowProps","className","_prefixClass","hasFrozenColumns","role","key","getIsResetting","_getIsResetting","cellRenderer","expandIconRenderer","onRowExpand","onRowHover","onRowHeightChange","column","columnIndex","expandIcon","PlaceholderKey","getColumnStyle","dataGetter","cellData","cellProps","container","cell","cellCls","cls","CENTER","RIGHT","tagName","rest","Tag","headerIndex","headerClassName","headerRenderer","headerClass","headerProps","sortBy","sortState","headerCellProps","sorting","sortOrder","order","ASC","DESC","sortable","resizable","renderMainTable","headerHeight","_getTableHeight","tableWidth","columnsWidth","Math","max","round","getMainColumns","renderLeftTable","containerHeight","_getFrozenContainerHeight","getLeftFrozenColumnsWidth","getLeftFrozenColumns","renderRightTable","getRightFrozenColumnsWidth","scrollbarWidth","getRightFrozenColumns","renderResizingLine","idx","findIndex","columnWidth","frozen","leftWidth","recomputeColumnsWidth","slice","left","rightWidth","renderFooter","footerHeight","footerRenderer","renderEmptyLayer","frozenData","emptyRenderer","_getHeaderHeight","top","bottom","renderOverlay","overlayRenderer","render","disabled","classPrefix","_calcScrollbarSizes","_totalRowsHeight","containerStyle","position","componentDidMount","componentDidUpdate","prevProps","prevState","maxHeight","_maybeCallOnEndReached","_maybeScrollbarPresenceChange","ref","name","components","Array","isArray","reduce","sum","_getFrozenRowsHeight","tableHeight","frozenRowsHeight","totalRowsHeight","totalHeight","min","_getBodyHeight","totalColumnsWidth","prevHorizontalScrollbarSize","prevVerticalScrollbarSize","onScrollbarPresenceChange","size","horizontal","vertical","onEndReached","onEndReachedThreshold","scrollHeight","clientHeight","distanceFromEnd","args","lastScrollTop","onScroll","onRowsRendered","overscanStopIndex","hovered","push","index","splice","onExpandedRowsChange","setColumnWidth","getColumn","onColumnResize","onColumnResizeEnd","event","currentTarget","dataset","onColumnSort","PureComponent","defaultProps","useIsScrolling","overscanRowCount","propTypes","string","object","node","arrayOf","shape","array","isRequired","oneOfType","number","bool","func","element","oneOf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport memoize from 'memoize-one';\n\nimport GridTable from './GridTable';\nimport TableHeaderRow from './TableHeaderRow';\nimport TableRow from './TableRow';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableCell from './TableCell';\nimport Column, { Alignment, FrozenDirection } from './Column';\nimport SortOrder from './SortOrder';\nimport ExpandIcon from './ExpandIcon';\nimport SortIndicator from './SortIndicator';\nimport ColumnResizer from './ColumnResizer';\nimport ColumnManager from './ColumnManager';\n\nimport {\n  renderElement,\n  normalizeColumns,\n  getScrollbarSize as defaultGetScrollbarSize,\n  isObjectEqual,\n  callOrReturn,\n  hasChildren,\n  flattenOnKeys,\n  cloneArray,\n  getValue,\n  throttle,\n  debounce,\n  noop,\n} from './utils';\n\nconst getColumns = memoize((columns, children) => columns || normalizeColumns(children));\n\nconst getContainerStyle = (width, maxWidth, height) => ({\n  width,\n  maxWidth,\n  height,\n  overflow: 'hidden',\n});\n\nconst DEFAULT_COMPONENTS = {\n  TableCell,\n  TableHeaderCell,\n  ExpandIcon,\n  SortIndicator,\n};\n\nconst RESIZE_THROTTLE_WAIT = 50;\n\n// used for memoization\nconst EMPTY_ARRAY = [];\n\n/**\n * React table component\n */\nclass BaseTable extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    const { columns, children, defaultExpandedRowKeys } = props;\n    this.state = {\n      scrollbarSize: 0,\n      hoveredRowKey: null,\n      resizingKey: null,\n      resizingWidth: 0,\n      expandedRowKeys: cloneArray(defaultExpandedRowKeys),\n    };\n    this.columnManager = new ColumnManager(getColumns(columns, children), props.fixed);\n\n    this._setContainerRef = this._setContainerRef.bind(this);\n    this._setMainTableRef = this._setMainTableRef.bind(this);\n    this._setLeftTableRef = this._setLeftTableRef.bind(this);\n    this._setRightTableRef = this._setRightTableRef.bind(this);\n\n    this.renderExpandIcon = this.renderExpandIcon.bind(this);\n    this.renderRow = this.renderRow.bind(this);\n    this.renderRowCell = this.renderRowCell.bind(this);\n    this.renderHeader = this.renderHeader.bind(this);\n    this.renderHeaderCell = this.renderHeaderCell.bind(this);\n\n    this._handleScroll = this._handleScroll.bind(this);\n    this._handleVerticalScroll = this._handleVerticalScroll.bind(this);\n    this._handleRowsRendered = this._handleRowsRendered.bind(this);\n    this._handleRowHover = this._handleRowHover.bind(this);\n    this._handleRowExpand = this._handleRowExpand.bind(this);\n    this._handleColumnResize = throttle(this._handleColumnResize.bind(this), RESIZE_THROTTLE_WAIT);\n    this._handleColumnResizeStart = this._handleColumnResizeStart.bind(this);\n    this._handleColumnResizeStop = this._handleColumnResizeStop.bind(this);\n    this._handleColumnSort = this._handleColumnSort.bind(this);\n    this._handleFrozenRowHeightChange = this._handleFrozenRowHeightChange.bind(this);\n    this._handleRowHeightChange = this._handleRowHeightChange.bind(this);\n\n    this._getLeftTableContainerStyle = memoize(getContainerStyle);\n    this._getRightTableContainerStyle = memoize(getContainerStyle);\n    this._flattenOnKeys = memoize((tree, keys, dataKey) => {\n      this._depthMap = {};\n      return flattenOnKeys(tree, keys, this._depthMap, dataKey);\n    });\n    this._resetColumnManager = memoize(\n      (columns, fixed) => {\n        this.columnManager.reset(columns, fixed);\n\n        if (this.props.estimatedRowHeight && fixed) {\n          if (!this.columnManager.hasLeftFrozenColumns()) {\n            this._leftRowHeightMap = {};\n          }\n          if (!this.columnManager.hasRightFrozenColumns()) {\n            this._rightRowHeightMap = {};\n          }\n        }\n      },\n      (newArgs, lastArgs) => isObjectEqual(newArgs, lastArgs, this.props.ignoreFunctionInColumnCompare)\n    );\n\n    this._isResetting = false;\n    this._resetIndex = null;\n    this._rowHeightMap = {};\n    this._rowHeightMapBuffer = {};\n    this._mainRowHeightMap = {};\n    this._leftRowHeightMap = {};\n    this._rightRowHeightMap = {};\n    this._getRowHeight = this._getRowHeight.bind(this);\n    this._updateRowHeights = debounce(() => {\n      this._isResetting = true;\n      this._rowHeightMap = { ...this._rowHeightMap, ...this._rowHeightMapBuffer };\n      this.resetAfterRowIndex(this._resetIndex, false);\n      this._rowHeightMapBuffer = {};\n      this._resetIndex = null;\n      this.forceUpdateTable();\n      this.forceUpdate();\n      this._isResetting = false;\n    }, 0);\n\n    this._scroll = { scrollLeft: 0, scrollTop: 0 };\n    this._scrollHeight = 0;\n    this._lastScannedRowIndex = -1;\n    this._hasDataChangedSinceEndReached = true;\n\n    this._data = props.data;\n    this._depthMap = {};\n\n    this._horizontalScrollbarSize = 0;\n    this._verticalScrollbarSize = 0;\n    this._scrollbarPresenceChanged = false;\n  }\n\n  /**\n   * Get the DOM node of the table\n   */\n  getDOMNode() {\n    return this.tableNode;\n  }\n\n  /**\n   * Get the column manager\n   */\n  getColumnManager() {\n    return this.columnManager;\n  }\n\n  /**\n   * Get internal `expandedRowKeys` state\n   */\n  getExpandedRowKeys() {\n    const { expandedRowKeys } = this.props;\n    return expandedRowKeys !== undefined ? expandedRowKeys || EMPTY_ARRAY : this.state.expandedRowKeys;\n  }\n\n  /**\n   * Get the expanded state, fallback to normal state if not expandable.\n   */\n  getExpandedState() {\n    return {\n      expandedData: this._data,\n      expandedRowKeys: this.getExpandedRowKeys(),\n      expandedDepthMap: this._depthMap,\n    };\n  }\n\n  /**\n   * Get the total height of all rows, including expanded rows.\n   */\n  getTotalRowsHeight() {\n    const { rowHeight, estimatedRowHeight } = this.props;\n\n    if (estimatedRowHeight) {\n      return this.table ? this.table.getTotalRowsHeight() : this._data.length * estimatedRowHeight;\n    }\n    return this._data.length * rowHeight;\n  }\n\n  /**\n   * Get the total width of all columns.\n   */\n  getTotalColumnsWidth() {\n    return this.columnManager.getColumnsWidth();\n  }\n\n  /**\n   * Forcefully re-render the inner Grid component.\n   *\n   * Calling `forceUpdate` on `Table` may not re-render the inner Grid since it uses `shallowCompare` as a performance optimization.\n   * Use this method if you want to manually trigger a re-render.\n   * This may be appropriate if the underlying row data has changed but the row sizes themselves have not.\n   */\n  forceUpdateTable() {\n    this.table && this.table.forceUpdateTable();\n    this.leftTable && this.leftTable.forceUpdateTable();\n    this.rightTable && this.rightTable.forceUpdateTable();\n  }\n\n  /**\n   * Reset cached offsets for positioning after a specific rowIndex, should be used only in dynamic mode(estimatedRowHeight is provided)\n   *\n   * @param {number} rowIndex\n   * @param {boolean} shouldForceUpdate\n   */\n  resetAfterRowIndex(rowIndex = 0, shouldForceUpdate = true) {\n    if (!this.props.estimatedRowHeight) return;\n\n    this.table && this.table.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n    this.leftTable && this.leftTable.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n    this.rightTable && this.rightTable.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n  }\n\n  /**\n   * Reset row height cache, useful if `data` changed entirely, should be used only in dynamic mode(estimatedRowHeight is provided)\n   */\n  resetRowHeightCache() {\n    if (!this.props.estimatedRowHeight) return;\n\n    this._resetIndex = null;\n    this._rowHeightMapBuffer = {};\n    this._rowHeightMap = {};\n    this._mainRowHeightMap = {};\n    this._leftRowHeightMap = {};\n    this._rightRowHeightMap = {};\n  }\n\n  /**\n   * Scroll to the specified offset.\n   * Useful for animating position changes.\n   *\n   * @param {object} offset\n   */\n  scrollToPosition(offset) {\n    this._scroll = offset;\n\n    this.table && this.table.scrollToPosition(offset);\n    this.leftTable && this.leftTable.scrollToTop(offset.scrollTop);\n    this.rightTable && this.rightTable.scrollToTop(offset.scrollTop);\n  }\n\n  /**\n   * Scroll to the specified offset vertically.\n   *\n   * @param {number} scrollTop\n   */\n  scrollToTop(scrollTop) {\n    this._scroll.scrollTop = scrollTop;\n\n    this.table && this.table.scrollToPosition(this._scroll);\n    this.leftTable && this.leftTable.scrollToTop(scrollTop);\n    this.rightTable && this.rightTable.scrollToTop(scrollTop);\n  }\n\n  /**\n   * Scroll to the specified offset horizontally.\n   *\n   * @param {number} scrollLeft\n   */\n  scrollToLeft(scrollLeft) {\n    this._scroll.scrollLeft = scrollLeft;\n\n    this.table && this.table.scrollToPosition(this._scroll);\n  }\n\n  /**\n   * Scroll to the specified row.\n   * By default, the table will scroll as little as possible to ensure the row is visible.\n   * You can control the alignment of the row though by specifying an align property. Acceptable values are:\n   *\n   * - `auto` (default) - Scroll as little as possible to ensure the row is visible.\n   * - `smart` - Same as `auto` if it is less than one viewport away, or it's the same as`center`.\n   * - `center` - Center align the row within the table.\n   * - `end` - Align the row to the bottom side of the table.\n   * - `start` - Align the row to the top side of the table.\n   *\n   * @param {number} rowIndex\n   * @param {string} align\n   */\n  scrollToRow(rowIndex = 0, align = 'auto') {\n    this.table && this.table.scrollToRow(rowIndex, align);\n    this.leftTable && this.leftTable.scrollToRow(rowIndex, align);\n    this.rightTable && this.rightTable.scrollToRow(rowIndex, align);\n  }\n\n  /**\n   * Set `expandedRowKeys` manually.\n   * This method is available only if `expandedRowKeys` is uncontrolled.\n   *\n   * @param {array} expandedRowKeys\n   */\n  setExpandedRowKeys(expandedRowKeys) {\n    // if `expandedRowKeys` is controlled\n    if (this.props.expandedRowKeys !== undefined) return;\n\n    this.setState({\n      expandedRowKeys: cloneArray(expandedRowKeys),\n    });\n  }\n\n  renderExpandIcon({ rowData, rowIndex, depth, onExpand }) {\n    const { rowKey, expandColumnKey, expandIconProps } = this.props;\n    if (!expandColumnKey) return null;\n\n    const expandable = rowIndex >= 0 && hasChildren(rowData);\n    const expanded = rowIndex >= 0 && this.getExpandedRowKeys().indexOf(rowData[rowKey]) >= 0;\n    const extraProps = callOrReturn(expandIconProps, { rowData, rowIndex, depth, expandable, expanded });\n    const ExpandIcon = this._getComponent('ExpandIcon');\n\n    return <ExpandIcon depth={depth} expandable={expandable} expanded={expanded} {...extraProps} onExpand={onExpand} />;\n  }\n\n  renderRow({ isScrolling, columns, rowData, rowIndex, style }) {\n    const { rowClassName, rowRenderer, rowEventHandlers, expandColumnKey, estimatedRowHeight } = this.props;\n\n    const rowClass = callOrReturn(rowClassName, { columns, rowData, rowIndex });\n    const extraProps = callOrReturn(this.props.rowProps, { columns, rowData, rowIndex });\n    const rowKey = rowData[this.props.rowKey];\n    const depth = this._depthMap[rowKey] || 0;\n\n    const className = cn(this._prefixClass('row'), rowClass, {\n      [this._prefixClass(`row--depth-${depth}`)]: !!expandColumnKey && rowIndex >= 0,\n      [this._prefixClass('row--expanded')]: !!expandColumnKey && this.getExpandedRowKeys().indexOf(rowKey) >= 0,\n      [this._prefixClass('row--hovered')]: !isScrolling && rowKey === this.state.hoveredRowKey,\n      [this._prefixClass('row--frozen')]: depth === 0 && rowIndex < 0,\n      [this._prefixClass('row--customized')]: rowRenderer,\n    });\n\n    const hasFrozenColumns = this.columnManager.hasFrozenColumns();\n    const rowProps = {\n      ...extraProps,\n      role: 'row',\n      key: `row-${rowKey}`,\n      isScrolling,\n      className,\n      style,\n      columns,\n      rowIndex,\n      rowData,\n      rowKey,\n      expandColumnKey,\n      depth,\n      rowEventHandlers,\n      rowRenderer,\n      // for frozen rows we use fixed rowHeight\n      estimatedRowHeight: rowIndex >= 0 ? estimatedRowHeight : undefined,\n      getIsResetting: this._getIsResetting,\n      cellRenderer: this.renderRowCell,\n      expandIconRenderer: this.renderExpandIcon,\n      onRowExpand: this._handleRowExpand,\n      // for fixed table, we need to sync the hover state across the inner tables\n      onRowHover: hasFrozenColumns ? this._handleRowHover : null,\n      onRowHeightChange: hasFrozenColumns ? this._handleFrozenRowHeightChange : this._handleRowHeightChange,\n    };\n\n    return <TableRow {...rowProps} />;\n  }\n\n  renderRowCell({ isScrolling, columns, column, columnIndex, rowData, rowIndex, expandIcon }) {\n    if (column[ColumnManager.PlaceholderKey]) {\n      return (\n        <div\n          key={`row-${rowData[this.props.rowKey]}-cell-${column.key}-placeholder`}\n          className={this._prefixClass('row-cell-placeholder')}\n          style={this.columnManager.getColumnStyle(column.key)}\n        />\n      );\n    }\n\n    const { className, dataKey, dataGetter, cellRenderer } = column;\n    const TableCell = this._getComponent('TableCell');\n\n    const cellData = dataGetter\n      ? dataGetter({ columns, column, columnIndex, rowData, rowIndex })\n      : getValue(rowData, dataKey);\n    const cellProps = { isScrolling, cellData, columns, column, columnIndex, rowData, rowIndex, container: this };\n    const cell = renderElement(cellRenderer || <TableCell className={this._prefixClass('row-cell-text')} />, cellProps);\n\n    const cellCls = callOrReturn(className, { cellData, columns, column, columnIndex, rowData, rowIndex });\n    const cls = cn(this._prefixClass('row-cell'), cellCls, {\n      [this._prefixClass('row-cell--align-center')]: column.align === Alignment.CENTER,\n      [this._prefixClass('row-cell--align-right')]: column.align === Alignment.RIGHT,\n    });\n\n    const extraProps = callOrReturn(this.props.cellProps, { columns, column, columnIndex, rowData, rowIndex });\n    const { tagName, ...rest } = extraProps || {};\n    const Tag = tagName || 'div';\n    return (\n      <Tag\n        role=\"gridcell\"\n        key={`row-${rowData[this.props.rowKey]}-cell-${column.key}`}\n        {...rest}\n        className={cls}\n        style={this.columnManager.getColumnStyle(column.key)}\n      >\n        {expandIcon}\n        {cell}\n      </Tag>\n    );\n  }\n\n  renderHeader({ columns, headerIndex, style }) {\n    const { headerClassName, headerRenderer } = this.props;\n\n    const headerClass = callOrReturn(headerClassName, { columns, headerIndex });\n    const extraProps = callOrReturn(this.props.headerProps, { columns, headerIndex });\n\n    const className = cn(this._prefixClass('header-row'), headerClass, {\n      [this._prefixClass('header-row--resizing')]: !!this.state.resizingKey,\n      [this._prefixClass('header-row--customized')]: headerRenderer,\n    });\n\n    const headerProps = {\n      ...extraProps,\n      role: 'row',\n      key: `header-${headerIndex}`,\n      className,\n      style,\n      columns,\n      headerIndex,\n      headerRenderer,\n      cellRenderer: this.renderHeaderCell,\n      expandColumnKey: this.props.expandColumnKey,\n      expandIcon: this._getComponent('ExpandIcon'),\n    };\n\n    return <TableHeaderRow {...headerProps} />;\n  }\n\n  renderHeaderCell({ columns, column, columnIndex, headerIndex, expandIcon }) {\n    if (column[ColumnManager.PlaceholderKey]) {\n      return (\n        <div\n          key={`header-${headerIndex}-cell-${column.key}-placeholder`}\n          className={this._prefixClass('header-cell-placeholder')}\n          style={this.columnManager.getColumnStyle(column.key)}\n        />\n      );\n    }\n\n    const { headerClassName, headerRenderer } = column;\n    const { sortBy, sortState, headerCellProps } = this.props;\n    const TableHeaderCell = this._getComponent('TableHeaderCell');\n    const SortIndicator = this._getComponent('SortIndicator');\n\n    const cellProps = { columns, column, columnIndex, headerIndex, container: this };\n    const cell = renderElement(\n      headerRenderer || <TableHeaderCell className={this._prefixClass('header-cell-text')} />,\n      cellProps\n    );\n\n    let sorting, sortOrder;\n\n    if (sortState) {\n      const order = sortState[column.key];\n      sorting = order === SortOrder.ASC || order === SortOrder.DESC;\n      sortOrder = sorting ? order : SortOrder.ASC;\n    } else {\n      sorting = column.key === sortBy.key;\n      sortOrder = sorting ? sortBy.order : SortOrder.ASC;\n    }\n\n    const cellCls = callOrReturn(headerClassName, { columns, column, columnIndex, headerIndex });\n    const cls = cn(this._prefixClass('header-cell'), cellCls, {\n      [this._prefixClass('header-cell--align-center')]: column.align === Alignment.CENTER,\n      [this._prefixClass('header-cell--align-right')]: column.align === Alignment.RIGHT,\n      [this._prefixClass('header-cell--sortable')]: column.sortable,\n      [this._prefixClass('header-cell--sorting')]: sorting,\n      [this._prefixClass('header-cell--resizing')]: column.key === this.state.resizingKey,\n    });\n    const extraProps = callOrReturn(headerCellProps, { columns, column, columnIndex, headerIndex });\n    const { tagName, ...rest } = extraProps || {};\n    const Tag = tagName || 'div';\n    return (\n      <Tag\n        role=\"gridcell\"\n        key={`header-${headerIndex}-cell-${column.key}`}\n        onClick={column.sortable ? this._handleColumnSort : null}\n        {...rest}\n        className={cls}\n        style={this.columnManager.getColumnStyle(column.key)}\n        data-key={column.key}\n      >\n        {expandIcon}\n        {cell}\n        {column.sortable && (\n          <SortIndicator\n            sortOrder={sortOrder}\n            className={cn(this._prefixClass('sort-indicator'), {\n              [this._prefixClass('sort-indicator--descending')]: sortOrder === SortOrder.DESC,\n            })}\n          />\n        )}\n        {column.resizable && (\n          <ColumnResizer\n            className={this._prefixClass('column-resizer')}\n            column={column}\n            onResizeStart={this._handleColumnResizeStart}\n            onResizeStop={this._handleColumnResizeStop}\n            onResize={this._handleColumnResize}\n          />\n        )}\n      </Tag>\n    );\n  }\n\n  renderMainTable() {\n    const { width, headerHeight, rowHeight, fixed, estimatedRowHeight, ...rest } = this.props;\n    const height = this._getTableHeight();\n\n    let tableWidth = width - this._verticalScrollbarSize;\n    if (fixed) {\n      const columnsWidth = this.columnManager.getColumnsWidth();\n      // make sure `scrollLeft` is always integer to fix a sync bug when scrolling to end horizontally\n      tableWidth = Math.max(Math.round(columnsWidth), tableWidth);\n    }\n    return (\n      <GridTable\n        {...rest}\n        {...this.state}\n        className={this._prefixClass('table-main')}\n        ref={this._setMainTableRef}\n        data={this._data}\n        columns={this.columnManager.getMainColumns()}\n        width={width}\n        height={height}\n        headerHeight={headerHeight}\n        rowHeight={rowHeight}\n        estimatedRowHeight={estimatedRowHeight}\n        getRowHeight={estimatedRowHeight ? this._getRowHeight : undefined}\n        headerWidth={tableWidth + (fixed ? this._verticalScrollbarSize : 0)}\n        bodyWidth={tableWidth}\n        headerRenderer={this.renderHeader}\n        rowRenderer={this.renderRow}\n        onScroll={this._handleScroll}\n        onRowsRendered={this._handleRowsRendered}\n      />\n    );\n  }\n\n  renderLeftTable() {\n    if (!this.columnManager.hasLeftFrozenColumns()) return null;\n\n    const { width, headerHeight, rowHeight, estimatedRowHeight, ...rest } = this.props;\n\n    const containerHeight = this._getFrozenContainerHeight();\n    const offset = this._verticalScrollbarSize || 20;\n    const columnsWidth = this.columnManager.getLeftFrozenColumnsWidth();\n    return (\n      <GridTable\n        {...rest}\n        {...this.state}\n        containerStyle={this._getLeftTableContainerStyle(columnsWidth, width, containerHeight)}\n        className={this._prefixClass('table-frozen-left')}\n        ref={this._setLeftTableRef}\n        data={this._data}\n        columns={this.columnManager.getLeftFrozenColumns()}\n        initialScrollTop={this._scroll.scrollTop}\n        width={columnsWidth + offset}\n        height={containerHeight}\n        headerHeight={headerHeight}\n        rowHeight={rowHeight}\n        estimatedRowHeight={estimatedRowHeight}\n        getRowHeight={estimatedRowHeight ? this._getRowHeight : undefined}\n        headerWidth={columnsWidth + offset}\n        bodyWidth={columnsWidth + offset}\n        headerRenderer={this.renderHeader}\n        rowRenderer={this.renderRow}\n        onScroll={this._handleVerticalScroll}\n        onRowsRendered={noop}\n      />\n    );\n  }\n\n  renderRightTable() {\n    if (!this.columnManager.hasRightFrozenColumns()) return null;\n\n    const { width, headerHeight, rowHeight, estimatedRowHeight, ...rest } = this.props;\n\n    const containerHeight = this._getFrozenContainerHeight();\n    const columnsWidth = this.columnManager.getRightFrozenColumnsWidth();\n    const scrollbarWidth = this._verticalScrollbarSize;\n    return (\n      <GridTable\n        {...rest}\n        {...this.state}\n        containerStyle={this._getLeftTableContainerStyle(columnsWidth + scrollbarWidth, width, containerHeight)}\n        className={this._prefixClass('table-frozen-right')}\n        ref={this._setRightTableRef}\n        data={this._data}\n        columns={this.columnManager.getRightFrozenColumns()}\n        initialScrollTop={this._scroll.scrollTop}\n        width={columnsWidth + scrollbarWidth}\n        height={containerHeight}\n        headerHeight={headerHeight}\n        rowHeight={rowHeight}\n        estimatedRowHeight={estimatedRowHeight}\n        getRowHeight={estimatedRowHeight ? this._getRowHeight : undefined}\n        headerWidth={columnsWidth + scrollbarWidth}\n        bodyWidth={columnsWidth}\n        headerRenderer={this.renderHeader}\n        rowRenderer={this.renderRow}\n        onScroll={this._handleVerticalScroll}\n        onRowsRendered={noop}\n      />\n    );\n  }\n\n  renderResizingLine() {\n    const { width, fixed } = this.props;\n    const { resizingKey } = this.state;\n    if (!fixed || !resizingKey) return null;\n\n    const columns = this.columnManager.getMainColumns();\n    const idx = columns.findIndex(column => column.key === resizingKey);\n    const column = columns[idx];\n    const { width: columnWidth, frozen } = column;\n    const leftWidth = this.columnManager.recomputeColumnsWidth(columns.slice(0, idx));\n\n    let left = leftWidth + columnWidth;\n    if (!frozen) {\n      left -= this._scroll.scrollLeft;\n    } else if (frozen === FrozenDirection.RIGHT) {\n      const rightWidth = this.columnManager.recomputeColumnsWidth(columns.slice(idx + 1));\n      if (rightWidth + columnWidth > width - this._verticalScrollbarSize) {\n        left = columnWidth;\n      } else {\n        left = width - this._verticalScrollbarSize - rightWidth;\n      }\n    }\n    const style = {\n      left,\n      height: this._getTableHeight() - this._horizontalScrollbarSize,\n    };\n    return <div className={this._prefixClass('resizing-line')} style={style} />;\n  }\n\n  renderFooter() {\n    const { footerHeight, footerRenderer } = this.props;\n    if (footerHeight === 0) return null;\n    return (\n      <div className={this._prefixClass('footer')} style={{ height: footerHeight }}>\n        {renderElement(footerRenderer)}\n      </div>\n    );\n  }\n\n  renderEmptyLayer() {\n    const { data, frozenData, footerHeight, emptyRenderer } = this.props;\n\n    if ((data && data.length) || (frozenData && frozenData.length)) return null;\n    const headerHeight = this._getHeaderHeight();\n    return (\n      <div className={this._prefixClass('empty-layer')} style={{ top: headerHeight, bottom: footerHeight }}>\n        {renderElement(emptyRenderer)}\n      </div>\n    );\n  }\n\n  renderOverlay() {\n    const { overlayRenderer } = this.props;\n\n    return <div className={this._prefixClass('overlay')}>{!!overlayRenderer && renderElement(overlayRenderer)}</div>;\n  }\n\n  render() {\n    const {\n      columns,\n      children,\n      width,\n      fixed,\n      data,\n      frozenData,\n      expandColumnKey,\n      disabled,\n      className,\n      style,\n      footerHeight,\n      classPrefix,\n      estimatedRowHeight,\n    } = this.props;\n    this._resetColumnManager(getColumns(columns, children), fixed);\n\n    const _data = expandColumnKey ? this._flattenOnKeys(data, this.getExpandedRowKeys(), this.props.rowKey) : data;\n    if (this._data !== _data) {\n      this.resetAfterRowIndex(0, false);\n      this._data = _data;\n    }\n    // should be after `this._data` assigned\n    this._calcScrollbarSizes();\n    this._totalRowsHeight = this.getTotalRowsHeight();\n\n    const containerStyle = {\n      ...style,\n      width,\n      height: this._getTableHeight() + footerHeight,\n      position: 'relative',\n    };\n    const cls = cn(classPrefix, className, {\n      [`${classPrefix}--fixed`]: fixed,\n      [`${classPrefix}--expandable`]: !!expandColumnKey,\n      [`${classPrefix}--empty`]: data.length === 0,\n      [`${classPrefix}--has-frozen-rows`]: frozenData.length > 0,\n      [`${classPrefix}--has-frozen-columns`]: this.columnManager.hasFrozenColumns(),\n      [`${classPrefix}--disabled`]: disabled,\n      [`${classPrefix}--dynamic`]: estimatedRowHeight > 0,\n    });\n    return (\n      <div ref={this._setContainerRef} className={cls} style={containerStyle}>\n        {this.renderFooter()}\n        {this.renderMainTable()}\n        {this.renderLeftTable()}\n        {this.renderRightTable()}\n        {this.renderResizingLine()}\n        {this.renderEmptyLayer()}\n        {this.renderOverlay()}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const scrollbarSize = this.props.getScrollbarSize();\n    if (scrollbarSize > 0) {\n      this.setState({ scrollbarSize });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { data, height, maxHeight, estimatedRowHeight } = this.props;\n    if (data !== prevProps.data) {\n      this._lastScannedRowIndex = -1;\n      this._hasDataChangedSinceEndReached = true;\n    }\n\n    if (maxHeight !== prevProps.maxHeight || height !== prevProps.height) {\n      this._maybeCallOnEndReached();\n    }\n    this._maybeScrollbarPresenceChange();\n\n    if (estimatedRowHeight) {\n      if (this.getTotalRowsHeight() !== this._totalRowsHeight) {\n        this.forceUpdate();\n      }\n    }\n  }\n\n  _prefixClass(className) {\n    return `${this.props.classPrefix}__${className}`;\n  }\n\n  _setContainerRef(ref) {\n    this.tableNode = ref;\n  }\n\n  _setMainTableRef(ref) {\n    this.table = ref;\n  }\n\n  _setLeftTableRef(ref) {\n    this.leftTable = ref;\n  }\n\n  _setRightTableRef(ref) {\n    this.rightTable = ref;\n  }\n\n  _getComponent(name) {\n    if (this.props.components && this.props.components[name]) return this.props.components[name];\n    return DEFAULT_COMPONENTS[name];\n  }\n\n  // for dynamic row height\n  _getRowHeight(rowIndex) {\n    const { estimatedRowHeight, rowKey } = this.props;\n    return this._rowHeightMap[this._data[rowIndex][rowKey]] || estimatedRowHeight;\n  }\n\n  _getIsResetting() {\n    return this._isResetting;\n  }\n\n  _getHeaderHeight() {\n    const { headerHeight } = this.props;\n    if (Array.isArray(headerHeight)) {\n      return headerHeight.reduce((sum, height) => sum + height, 0);\n    }\n    return headerHeight;\n  }\n\n  _getFrozenRowsHeight() {\n    const { frozenData, rowHeight } = this.props;\n    return frozenData.length * rowHeight;\n  }\n\n  _getTableHeight() {\n    const { height, maxHeight, footerHeight } = this.props;\n    let tableHeight = height - footerHeight;\n\n    if (maxHeight > 0) {\n      const frozenRowsHeight = this._getFrozenRowsHeight();\n      const totalRowsHeight = this.getTotalRowsHeight();\n      const headerHeight = this._getHeaderHeight();\n      const totalHeight = headerHeight + frozenRowsHeight + totalRowsHeight + this._horizontalScrollbarSize;\n      tableHeight = Math.min(totalHeight, maxHeight - footerHeight);\n    }\n\n    return tableHeight;\n  }\n\n  _getBodyHeight() {\n    return this._getTableHeight() - this._getHeaderHeight() - this._getFrozenRowsHeight();\n  }\n\n  _getFrozenContainerHeight() {\n    const { maxHeight } = this.props;\n\n    const tableHeight = this._getTableHeight() - (this._data.length > 0 ? this._horizontalScrollbarSize : 0);\n    // in auto height mode tableHeight = totalHeight\n    if (maxHeight > 0) return tableHeight;\n\n    const totalHeight = this.getTotalRowsHeight() + this._getHeaderHeight() + this._getFrozenRowsHeight();\n    return Math.min(tableHeight, totalHeight);\n  }\n\n  _calcScrollbarSizes() {\n    const { fixed, width } = this.props;\n    const { scrollbarSize } = this.state;\n\n    const totalRowsHeight = this.getTotalRowsHeight();\n    const totalColumnsWidth = this.getTotalColumnsWidth();\n\n    const prevHorizontalScrollbarSize = this._horizontalScrollbarSize;\n    const prevVerticalScrollbarSize = this._verticalScrollbarSize;\n\n    if (scrollbarSize === 0) {\n      this._horizontalScrollbarSize = 0;\n      this._verticalScrollbarSize = 0;\n    } else {\n      // we have to set `this._horizontalScrollbarSize` before calling `this._getBodyHeight`\n      if (!fixed || totalColumnsWidth <= width - scrollbarSize) {\n        this._horizontalScrollbarSize = 0;\n        this._verticalScrollbarSize = totalRowsHeight > this._getBodyHeight() ? scrollbarSize : 0;\n      } else {\n        if (totalColumnsWidth > width) {\n          this._horizontalScrollbarSize = scrollbarSize;\n          this._verticalScrollbarSize =\n            totalRowsHeight > this._getBodyHeight() - this._horizontalScrollbarSize ? scrollbarSize : 0;\n        } else {\n          this._horizontalScrollbarSize = 0;\n          this._verticalScrollbarSize = 0;\n          if (totalRowsHeight > this._getBodyHeight()) {\n            this._horizontalScrollbarSize = scrollbarSize;\n            this._verticalScrollbarSize = scrollbarSize;\n          }\n        }\n      }\n    }\n\n    if (\n      prevHorizontalScrollbarSize !== this._horizontalScrollbarSize ||\n      prevVerticalScrollbarSize !== this._verticalScrollbarSize\n    ) {\n      this._scrollbarPresenceChanged = true;\n    }\n  }\n\n  _maybeScrollbarPresenceChange() {\n    if (this._scrollbarPresenceChanged) {\n      const { onScrollbarPresenceChange } = this.props;\n      this._scrollbarPresenceChanged = false;\n\n      onScrollbarPresenceChange({\n        size: this.state.scrollbarSize,\n        horizontal: this._horizontalScrollbarSize > 0,\n        vertical: this._verticalScrollbarSize > 0,\n      });\n    }\n  }\n\n  _maybeCallOnEndReached() {\n    const { onEndReached, onEndReachedThreshold } = this.props;\n    const { scrollTop } = this._scroll;\n    const scrollHeight = this.getTotalRowsHeight();\n    const clientHeight = this._getBodyHeight();\n\n    if (!onEndReached || !clientHeight || !scrollHeight) return;\n    const distanceFromEnd = scrollHeight - scrollTop - clientHeight + this._horizontalScrollbarSize;\n    if (\n      this._lastScannedRowIndex >= 0 &&\n      distanceFromEnd <= onEndReachedThreshold &&\n      (this._hasDataChangedSinceEndReached || scrollHeight !== this._scrollHeight)\n    ) {\n      this._hasDataChangedSinceEndReached = false;\n      this._scrollHeight = scrollHeight;\n      onEndReached({ distanceFromEnd });\n    }\n  }\n\n  _handleScroll(args) {\n    const lastScrollTop = this._scroll.scrollTop;\n    this.scrollToPosition(args);\n    this.props.onScroll(args);\n\n    if (args.scrollTop > lastScrollTop) this._maybeCallOnEndReached();\n  }\n\n  _handleVerticalScroll({ scrollTop }) {\n    const lastScrollTop = this._scroll.scrollTop;\n\n    if (scrollTop !== lastScrollTop) this.scrollToTop(scrollTop);\n    if (scrollTop > lastScrollTop) this._maybeCallOnEndReached();\n  }\n\n  _handleRowsRendered(args) {\n    this.props.onRowsRendered(args);\n\n    if (args.overscanStopIndex > this._lastScannedRowIndex) {\n      this._lastScannedRowIndex = args.overscanStopIndex;\n      this._maybeCallOnEndReached();\n    }\n  }\n\n  _handleRowHover({ hovered, rowKey }) {\n    this.setState({ hoveredRowKey: hovered ? rowKey : null });\n  }\n\n  _handleRowExpand({ expanded, rowData, rowIndex, rowKey }) {\n    const expandedRowKeys = cloneArray(this.getExpandedRowKeys());\n    if (expanded) {\n      if (!expandedRowKeys.indexOf(rowKey) >= 0) expandedRowKeys.push(rowKey);\n    } else {\n      const index = expandedRowKeys.indexOf(rowKey);\n      if (index > -1) {\n        expandedRowKeys.splice(index, 1);\n      }\n    }\n    // if `expandedRowKeys` is uncontrolled, update internal state\n    if (this.props.expandedRowKeys === undefined) {\n      this.setState({ expandedRowKeys });\n    }\n    this.props.onRowExpand({ expanded, rowData, rowIndex, rowKey });\n    this.props.onExpandedRowsChange(expandedRowKeys);\n  }\n\n  _handleColumnResize({ key }, width) {\n    this.columnManager.setColumnWidth(key, width);\n    this.setState({ resizingWidth: width });\n\n    const column = this.columnManager.getColumn(key);\n    this.props.onColumnResize({ column, width });\n  }\n\n  _handleColumnResizeStart({ key }) {\n    this.setState({ resizingKey: key });\n  }\n\n  _handleColumnResizeStop() {\n    const { resizingKey, resizingWidth } = this.state;\n    this.setState({ resizingKey: null, resizingWidth: 0 });\n\n    if (!resizingKey || !resizingWidth) return;\n\n    const column = this.columnManager.getColumn(resizingKey);\n    this.props.onColumnResizeEnd({ column, width: resizingWidth });\n  }\n\n  _handleColumnSort(event) {\n    const key = event.currentTarget.dataset.key;\n    const { sortBy, sortState, onColumnSort } = this.props;\n    let order = SortOrder.ASC;\n\n    if (sortState) {\n      order = sortState[key] === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n    } else if (key === sortBy.key) {\n      order = sortBy.order === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n    }\n\n    const column = this.columnManager.getColumn(key);\n    onColumnSort({ column, key, order });\n  }\n\n  _handleFrozenRowHeightChange(rowKey, size, rowIndex, frozen) {\n    if (!frozen) {\n      this._mainRowHeightMap[rowKey] = size;\n    } else if (frozen === FrozenDirection.RIGHT) {\n      this._rightRowHeightMap[rowKey] = size;\n    } else {\n      this._leftRowHeightMap[rowKey] = size;\n    }\n\n    const height = Math.max(\n      this._mainRowHeightMap[rowKey] || 0,\n      this._leftRowHeightMap[rowKey] || 0,\n      this._rightRowHeightMap[rowKey] || 0\n    );\n\n    if (this._rowHeightMap[rowKey] !== height) {\n      this._handleRowHeightChange(rowKey, height, rowIndex);\n    }\n  }\n\n  _handleRowHeightChange(rowKey, size, rowIndex) {\n    if (this._resetIndex === null) this._resetIndex = rowIndex;\n    else if (this._resetIndex > rowIndex) this._resetIndex = rowIndex;\n\n    this._rowHeightMapBuffer[rowKey] = size;\n    this._updateRowHeights();\n  }\n}\n\nBaseTable.Column = Column;\nBaseTable.PlaceholderKey = ColumnManager.PlaceholderKey;\n\nBaseTable.defaultProps = {\n  classPrefix: 'BaseTable',\n  rowKey: 'id',\n  data: [],\n  frozenData: [],\n  fixed: false,\n  headerHeight: 50,\n  rowHeight: 50,\n  footerHeight: 0,\n  defaultExpandedRowKeys: [],\n  sortBy: {},\n  useIsScrolling: false,\n  overscanRowCount: 1,\n  onEndReachedThreshold: 500,\n  getScrollbarSize: defaultGetScrollbarSize,\n  ignoreFunctionInColumnCompare: true,\n\n  onScroll: noop,\n  onRowsRendered: noop,\n  onScrollbarPresenceChange: noop,\n  onRowExpand: noop,\n  onExpandedRowsChange: noop,\n  onColumnSort: noop,\n  onColumnResize: noop,\n  onColumnResizeEnd: noop,\n};\n\nBaseTable.propTypes = {\n  /**\n   * Prefix for table's inner className\n   */\n  classPrefix: PropTypes.string,\n  /**\n   * Class name for the table\n   */\n  className: PropTypes.string,\n  /**\n   * Custom style for the table\n   */\n  style: PropTypes.object,\n  /**\n   * A collection of Column\n   */\n  children: PropTypes.node,\n  /**\n   * Columns for the table\n   */\n  columns: PropTypes.arrayOf(PropTypes.shape(Column.propTypes)),\n  /**\n   * The data for the table\n   */\n  data: PropTypes.array.isRequired,\n  /**\n   * The data be frozen to top, `rowIndex` is negative and started from `-1`\n   */\n  frozenData: PropTypes.array,\n  /**\n   * The key field of each data item\n   */\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  /**\n   * The width of the table\n   */\n  width: PropTypes.number.isRequired,\n  /**\n   * The height of the table, will be ignored if `maxHeight` is set\n   */\n  height: PropTypes.number,\n  /**\n   * The max height of the table, the table's height will auto change when data changes,\n   * will turns to vertical scroll if reaches the max height\n   */\n  maxHeight: PropTypes.number,\n  /**\n   * The height of each table row, will be only used by frozen rows if `estimatedRowHeight` is set\n   */\n  rowHeight: PropTypes.number,\n  /**\n   * Estimated row height, the real height will be measure dynamically according to the content\n   */\n  estimatedRowHeight: PropTypes.number,\n  /**\n   * The height of the table header, set to 0 to hide the header, could be an array to render multi headers.\n   */\n  headerHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]).isRequired,\n  /**\n   * The height of the table footer\n   */\n  footerHeight: PropTypes.number,\n  /**\n   * Whether the width of the columns are fixed or flexible\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Whether the table is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Custom renderer on top of the table component\n   */\n  overlayRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom renderer when the length of data is 0\n   */\n  emptyRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom footer renderer, available only if `footerHeight` is larger then 0\n   */\n  footerRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom header renderer\n   * The renderer receives props `{ cells, columns, headerIndex }`\n   */\n  headerRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom row renderer\n   * The renderer receives props `{ isScrolling, cells, columns, rowData, rowIndex, depth }`\n   */\n  rowRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Class name for the table header, could be a callback to return the class name\n   * The callback is of the shape of `({ columns, headerIndex }) => string`\n   */\n  headerClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  /**\n   * Class name for the table row, could be a callback to return the class name\n   * The callback is of the shape of `({ columns, rowData, rowIndex }) => string`\n   */\n  rowClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  /**\n   * Extra props applied to header element\n   * The handler is of the shape of `({ columns, headerIndex }) object`\n   */\n  headerProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to header cell element\n   * The handler is of the shape of `({ columns, column, columnIndex, headerIndex }) => object`\n   */\n  headerCellProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to row element\n   * The handler is of the shape of `({ columns, rowData, rowIndex }) => object`\n   */\n  rowProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to row cell element\n   * The handler is of the shape of `({ columns, column, columnIndex, rowData, rowIndex }) => object`\n   */\n  cellProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to ExpandIcon component\n   * The handler is of the shape of `({ rowData, rowIndex, depth, expandable, expanded }) => object`\n   */\n  expandIconProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * The key for the expand column which render the expand icon if the data is a tree\n   */\n  expandColumnKey: PropTypes.string,\n  /**\n   * Default expanded row keys when initialize the table\n   */\n  defaultExpandedRowKeys: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  /**\n   * Controlled expanded row keys\n   */\n  expandedRowKeys: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  /**\n   * A callback function when expand or collapse a tree node\n   * The handler is of the shape of `({ expanded, rowData, rowIndex, rowKey }) => *`\n   */\n  onRowExpand: PropTypes.func,\n  /**\n   * A callback function when the expanded row keys changed\n   * The handler is of the shape of `(expandedRowKeys) => *`\n   */\n  onExpandedRowsChange: PropTypes.func,\n  /**\n   * The sort state for the table, will be ignored if `sortState` is set\n   */\n  sortBy: PropTypes.shape({\n    /**\n     * Sort key\n     */\n    key: PropTypes.string,\n    /**\n     * Sort order\n     */\n    order: PropTypes.oneOf([SortOrder.ASC, SortOrder.DESC]),\n  }),\n  /**\n   * Multiple columns sort state for the table\n   *\n   * example:\n   * ```js\n   * {\n   *   'column-0': SortOrder.ASC,\n   *   'column-1': SortOrder.DESC,\n   * }\n   * ```\n   */\n  sortState: PropTypes.object,\n  /**\n   * A callback function for the header cell click event\n   * The handler is of the shape of `({ column, key, order }) => *`\n   */\n  onColumnSort: PropTypes.func,\n  /**\n   * A callback function when resizing the column width\n   * The handler is of the shape of `({ column, width }) => *`\n   */\n  onColumnResize: PropTypes.func,\n  /**\n   * A callback function when resizing the column width ends\n   * The handler is of the shape of `({ column, width }) => *`\n   */\n  onColumnResizeEnd: PropTypes.func,\n  /**\n   * Adds an additional isScrolling parameter to the row renderer.\n   * This parameter can be used to show a placeholder row while scrolling.\n   */\n  useIsScrolling: PropTypes.bool,\n  /**\n   * Number of rows to render above/below the visible bounds of the list\n   */\n  overscanRowCount: PropTypes.number,\n  /**\n   * Custom scrollbar size measurement\n   */\n  getScrollbarSize: PropTypes.func,\n  /**\n   * A callback function when scrolling the table\n   * The handler is of the shape of `({ scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested }) => *`\n   *\n   * `scrollLeft` and `scrollTop` are numbers.\n   *\n   * `horizontalDirection` and `verticalDirection` are either `forward` or `backward`.\n   *\n   * `scrollUpdateWasRequested` is a boolean. This value is true if the scroll was caused by `scrollTo*`,\n   * and false if it was the result of a user interaction in the browser.\n   */\n  onScroll: PropTypes.func,\n  /**\n   * A callback function when scrolling the table within `onEndReachedThreshold` of the bottom\n   * The handler is of the shape of `({ distanceFromEnd }) => *`\n   */\n  onEndReached: PropTypes.func,\n  /**\n   * Threshold in pixels for calling `onEndReached`.\n   */\n  onEndReachedThreshold: PropTypes.number,\n  /**\n   * A callback function with information about the slice of rows that were just rendered\n   * The handler is of the shape of `({ overscanStartIndex, overscanStopIndex, startIndex， stopIndex }) => *`\n   */\n  onRowsRendered: PropTypes.func,\n  /**\n   * A callback function when the scrollbar presence state changed\n   * The handler is of the shape of `({ size, vertical, horizontal }) => *`\n   */\n  onScrollbarPresenceChange: PropTypes.func,\n  /**\n   * A object for the row event handlers\n   * Each of the keys is row event name, like `onClick`, `onDoubleClick` and etc.\n   * Each of the handlers is of the shape of `({ rowData, rowIndex, rowKey, event }) => *`\n   */\n  rowEventHandlers: PropTypes.object,\n  /**\n   * whether to ignore function properties while comparing column definition\n   */\n  ignoreFunctionInColumnCompare: PropTypes.bool,\n  /**\n   * A object for the custom components, like `ExpandIcon` and `SortIndicator`\n   */\n  components: PropTypes.shape({\n    TableCell: PropTypes.func,\n    TableHeaderCell: PropTypes.func,\n    ExpandIcon: PropTypes.func,\n    SortIndicator: PropTypes.func,\n  }),\n};\n\nexport default BaseTable;\n"],"file":"BaseTable.js"}