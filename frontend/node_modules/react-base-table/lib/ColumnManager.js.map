{"version":3,"sources":["../src/ColumnManager.js"],"names":["ColumnManager","columns","fixed","_origColumns","reset","key","fn","_cached","_columns","map","column","width","resizable","idx","findIndex","x","_fixed","_columnStyles","recomputeColumnStyles","_cache","filter","hidden","getVisibleColumns","some","frozen","FrozenDirection","LEFT","RIGHT","hasFrozenColumns","mainColumns","getLeftFrozenColumns","forEach","push","PlaceholderKey","getRightFrozenColumns","recomputeColumnsWidth","reduce","getColumn","recomputeColumnStyle","flexGrow","flexShrink","flexValue","style","flex","msFlex","WebkitFlex","overflow","maxWidth","minWidth","styles"],"mappings":"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","sourcesContent":["import { FrozenDirection } from './Column';\n\nexport default class ColumnManager {\n  constructor(columns, fixed) {\n    this._origColumns = [];\n    this.reset(columns, fixed);\n  }\n\n  _cache(key, fn) {\n    if (key in this._cached) return this._cached[key];\n    this._cached[key] = fn();\n    return this._cached[key];\n  }\n\n  reset(columns, fixed) {\n    this._columns = columns.map(column => {\n      let width = column.width;\n      if (column.resizable) {\n        // don't reset column's `width` if `width` prop doesn't change\n        const idx = this._origColumns.findIndex(x => x.key === column.key);\n        if (idx >= 0 && this._origColumns[idx].width === column.width) {\n          width = this._columns[idx].width;\n        }\n      }\n      return { ...column, width };\n    });\n    this._origColumns = columns;\n    this._fixed = fixed;\n    this._cached = {};\n    this._columnStyles = this.recomputeColumnStyles();\n  }\n\n  resetCache() {\n    this._cached = {};\n  }\n\n  getOriginalColumns() {\n    return this._origColumns;\n  }\n\n  getColumns() {\n    return this._columns;\n  }\n\n  getVisibleColumns() {\n    return this._cache('visibleColumns', () => {\n      return this._columns.filter(column => !column.hidden);\n    });\n  }\n\n  hasFrozenColumns() {\n    return this._cache('hasFrozenColumns', () => {\n      return this._fixed && this.getVisibleColumns().some(column => !!column.frozen);\n    });\n  }\n\n  hasLeftFrozenColumns() {\n    return this._cache('hasLeftFrozenColumns', () => {\n      return (\n        this._fixed &&\n        this.getVisibleColumns().some(column => column.frozen === FrozenDirection.LEFT || column.frozen === true)\n      );\n    });\n  }\n\n  hasRightFrozenColumns() {\n    return this._cache('hasRightFrozenColumns', () => {\n      return this._fixed && this.getVisibleColumns().some(column => column.frozen === FrozenDirection.RIGHT);\n    });\n  }\n\n  getMainColumns() {\n    return this._cache('mainColumns', () => {\n      const columns = this.getVisibleColumns();\n      if (!this.hasFrozenColumns()) return columns;\n\n      const mainColumns = [];\n      this.getLeftFrozenColumns().forEach(column => {\n        //columns placeholder for the fixed table above them\n        mainColumns.push({ ...column, [ColumnManager.PlaceholderKey]: true });\n      });\n      this.getVisibleColumns().forEach(column => {\n        if (!column.frozen) mainColumns.push(column);\n      });\n      this.getRightFrozenColumns().forEach(column => {\n        mainColumns.push({ ...column, [ColumnManager.PlaceholderKey]: true });\n      });\n\n      return mainColumns;\n    });\n  }\n\n  getLeftFrozenColumns() {\n    return this._cache('leftFrozenColumns', () => {\n      if (!this._fixed) return [];\n      return this.getVisibleColumns().filter(\n        column => column.frozen === FrozenDirection.LEFT || column.frozen === true\n      );\n    });\n  }\n\n  getRightFrozenColumns() {\n    return this._cache('rightFrozenColumns', () => {\n      if (!this._fixed) return [];\n      return this.getVisibleColumns().filter(column => column.frozen === FrozenDirection.RIGHT);\n    });\n  }\n\n  getColumn(key) {\n    const idx = this._columns.findIndex(column => column.key === key);\n    return this._columns[idx];\n  }\n\n  getColumnsWidth() {\n    return this._cache('columnsWidth', () => {\n      return this.recomputeColumnsWidth(this.getVisibleColumns());\n    });\n  }\n\n  getLeftFrozenColumnsWidth() {\n    return this._cache('leftFrozenColumnsWidth', () => {\n      return this.recomputeColumnsWidth(this.getLeftFrozenColumns());\n    });\n  }\n\n  getRightFrozenColumnsWidth() {\n    return this._cache('rightFrozenColumnsWidth', () => {\n      return this.recomputeColumnsWidth(this.getRightFrozenColumns());\n    });\n  }\n\n  recomputeColumnsWidth(columns) {\n    return columns.reduce((width, column) => width + column.width, 0);\n  }\n\n  setColumnWidth(key, width) {\n    const column = this.getColumn(key);\n    column.width = width;\n    this._cached = {};\n    this._columnStyles[column.key] = this.recomputeColumnStyle(column);\n  }\n\n  getColumnStyle(key) {\n    return this._columnStyles[key];\n  }\n\n  getColumnStyles() {\n    return this._columnStyles;\n  }\n\n  recomputeColumnStyle(column) {\n    let flexGrow = 0;\n    let flexShrink = 0;\n    if (!this._fixed) {\n      flexGrow = typeof column.flexGrow === 'number' ? column.flexGrow : 0;\n      flexShrink = typeof column.flexShrink === 'number' ? column.flexShrink : 1;\n    }\n    // workaround for Flex bug on IE: https://github.com/philipwalton/flexbugs#flexbug-7\n    const flexValue = `${flexGrow} ${flexShrink} auto`;\n\n    const style = {\n      ...column.style,\n      flex: flexValue,\n      msFlex: flexValue,\n      WebkitFlex: flexValue,\n      width: column.width,\n      overflow: 'hidden',\n    };\n\n    if (!this._fixed && column.maxWidth) {\n      style.maxWidth = column.maxWidth;\n    }\n    if (!this._fixed && column.minWidth) {\n      style.minWidth = column.minWidth;\n    }\n\n    return style;\n  }\n\n  recomputeColumnStyles() {\n    return this._columns.reduce((styles, column) => {\n      styles[column.key] = this.recomputeColumnStyle(column);\n      return styles;\n    }, {});\n  }\n}\n\nColumnManager.PlaceholderKey = '__placeholder__';\n"],"file":"ColumnManager.js"}