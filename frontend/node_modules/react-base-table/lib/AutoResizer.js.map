{"version":3,"sources":["../src/AutoResizer.js"],"names":["AutoResizer","className","width","height","children","onResize","disableWidth","disableHeight","position","size","propTypes","PropTypes","string","number","func","isRequired"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;AAGA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAAsD;AAAA,MAAnDC,SAAmD,QAAnDA,SAAmD;AAAA,MAAxCC,KAAwC,QAAxCA,KAAwC;AAAA,MAAjCC,MAAiC,QAAjCA,MAAiC;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACxE,MAAMC,YAAY,GAAG,OAAOJ,KAAP,KAAiB,QAAtC;AACA,MAAMK,aAAa,GAAG,OAAOJ,MAAP,KAAkB,QAAxC;;AAEA,MAAIG,YAAY,IAAIC,aAApB,EAAmC;AACjC,WACE;AAAK,MAAA,SAAS,EAAEN,SAAhB;AAA2B,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,MAAM,EAANA,MAAT;AAAiBK,QAAAA,QAAQ,EAAE;AAA3B;AAAlC,OACGJ,QAAQ,CAAC;AAAEF,MAAAA,KAAK,EAALA,KAAF;AAASC,MAAAA,MAAM,EAANA;AAAT,KAAD,CADX,CADF;AAKD;;AAED,SACE,gCAAC,qCAAD;AAAW,IAAA,SAAS,EAAEF,SAAtB;AAAiC,IAAA,YAAY,EAAEK,YAA/C;AAA6D,IAAA,aAAa,EAAEC,aAA5E;AAA2F,IAAA,QAAQ,EAAEF;AAArG,KACG,UAAAI,IAAI;AAAA,WACHL,QAAQ,CAAC;AACPF,MAAAA,KAAK,EAAEI,YAAY,GAAGJ,KAAH,GAAWO,IAAI,CAACP,KAD5B;AAEPC,MAAAA,MAAM,EAAEI,aAAa,GAAGJ,MAAH,GAAYM,IAAI,CAACN;AAF/B,KAAD,CADL;AAAA,GADP,CADF;AAUD,CAtBD;;AAwBAH,WAAW,CAACU,SAAZ,GAAwB;AACtB;;;AAGAT,EAAAA,SAAS,EAAEU,sBAAUC,MAJC;;AAKtB;;;AAGAV,EAAAA,KAAK,EAAES,sBAAUE,MARK;;AAStB;;;AAGAV,EAAAA,MAAM,EAAEQ,sBAAUE,MAZI;;AAatB;;;;AAIAT,EAAAA,QAAQ,EAAEO,sBAAUG,IAAV,CAAeC,UAjBH;;AAkBtB;;;;AAIAV,EAAAA,QAAQ,EAAEM,sBAAUG;AAtBE,CAAxB;eAyBed,W","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\n/**\n * Decorator component that automatically adjusts the width and height of a single child\n */\nconst AutoResizer = ({ className, width, height, children, onResize }) => {\n  const disableWidth = typeof width === 'number';\n  const disableHeight = typeof height === 'number';\n\n  if (disableWidth && disableHeight) {\n    return (\n      <div className={className} style={{ width, height, position: 'relative' }}>\n        {children({ width, height })}\n      </div>\n    );\n  }\n\n  return (\n    <AutoSizer className={className} disableWidth={disableWidth} disableHeight={disableHeight} onResize={onResize}>\n      {size =>\n        children({\n          width: disableWidth ? width : size.width,\n          height: disableHeight ? height : size.height,\n        })\n      }\n    </AutoSizer>\n  );\n};\n\nAutoResizer.propTypes = {\n  /**\n   * Class name for the component\n   */\n  className: PropTypes.string,\n  /**\n   * the width of the component, will be the container's width if not set\n   */\n  width: PropTypes.number,\n  /**\n   * the height of the component, will be the container's width if not set\n   */\n  height: PropTypes.number,\n  /**\n   * A callback function to render the children component\n   * The handler is of the shape of `({ width, height }) => node`\n   */\n  children: PropTypes.func.isRequired,\n  /**\n   * A callback function when the size of the table container changed if the width and height are not set\n   * The handler is of the shape of `({ width, height }) => *`\n   */\n  onResize: PropTypes.func,\n};\n\nexport default AutoResizer;\n"],"file":"AutoResizer.js"}